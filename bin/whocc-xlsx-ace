#! /usr/bin/env python3

import sys, os, io, pprint, argparse, traceback
from pathlib import Path
import ae_backend
import ae.utils.load_module, ae.utils.open_file

# ----------------------------------------------------------------------

sWhoccTablesDir = Path(os.environ.get("WHOCC_TABLES_DIR"))

def main(args: argparse.Namespace):
    if not sWhoccTablesDir:
        raise RuntimeError(f"""WHOCC_TABLES_DIR env var not set""")
    detect_m = ae.utils.load_module.load(Path(sWhoccTablesDir, "ae-whocc-detect.py"))
    for source in args.filenames:
        workbook = ae_backend.whocc.xlsx.open(source)
        for sheet_no in range(workbook.number_of_sheets()):
            sheet = workbook.sheet(sheet_no)
            print(f"sheet {sheet_no} name: \"{sheet.name()}\" {sheet.number_of_rows()}:{sheet.number_of_columns()}")
            detected = detect_m.detect(sheet)
            print(detected)
            extractor = ae_backend.whocc.xlsx.extractor(sheet, detected)
            if args.serum_name_row is not None:
                extractor.force_serum_name_row(args.serum_name_row - 1)
            if args.serum_passage_row is not None:
                extractor.force_serum_passage_row(args.serum_passage_row - 1)
            if args.serum_id_row is not None:
                extractor.force_serum_id_row(args.serum_id_row - 1)
            if args.assay_information:
                print(extractor.format_assay_data(args.format))
            else:
                extractor.report_data_anchors()
                extractor.check_export_possibility()
                make_torg(extractor, args.output_dir)

# ----------------------------------------------------------------------

def make_torg(extractor: ae_backend.whocc.xlsx.Extractor, output_dir: Path):
    if not output_dir:
        output_dir = sWhoccTablesDir.joinpath(extractor.format_assay_data("{virus_type_lineage}-{assay_low_rbc}-{lab_low}"), "torg")
        if not output_dir.exists():
            raise RuntimeError(f"""Output dir "{output_dir}" does not exist""")
    filename = output_dir.joinpath(extractor.format_assay_data("{virus_type_lineage}-{assay_low_rbc}-{lab_low}-{table_date:%Y%m%d}") + ".torg")
    print(f">>> {filename}")
    with ae.utils.open_file.for_writing(filename) as output:
        generate_torg(extractor, output)

# ----------------------------------------------------------------------

def generate_torg(extractor: ae_backend.whocc.xlsx.Extractor, output: io.FileIO):
    ag_col = ["serum_field_name", "name", "date", "passage", "lab_id", "base"]
    sr_row = ["antigen_field_name", "name", "passage", "serum_id", "base"]

    data = []
    for row_no in range(extractor.number_of_antigens() + sr_row.index("base")):
        data.append(["" for col_no in range(extractor.number_of_sera() + ag_col.index("base"))])
    data[0][ag_col.index("name")] = "name"
    data[0][ag_col.index("date")] = "date"
    data[0][ag_col.index("passage")] = "passage"
    data[0][ag_col.index("lab_id")] = "lab_id"
    data[   sr_row.index("name")][0] = "name"
    data[   sr_row.index("passage")][0] = "passage"
    data[   sr_row.index("serum_id")][0] = "serum_id"

    for sr_no in range(extractor.number_of_sera()):
        sr_col = ag_col.index("base") + sr_no
        serum = extractor.serum(sr_no)
        # acmacs::data_fix::Set::fix(serum, sr_no)
        data[sr_row.index("name")][sr_col] = " ".join([serum["name"], serum["conc"], serum["dilut"], "BOOSTED" if serum["boosted"] else ""]).strip()
        data[sr_row.index("passage")][sr_col] = serum["passage"]
        data[sr_row.index("serum_id")][sr_col] = serum["serum_id"]

    for ag_no in range(extractor.number_of_antigens()):
        ag_row = sr_row.index("base") + ag_no
        antigen = extractor.antigen(ag_no)
        #     acmacs::data_fix::Set::fix(antigen, ag_no)
        data[ag_row][ag_col.index("name")] = antigen.name
        data[ag_row][ag_col.index("date")] = antigen.date
        data[ag_row][ag_col.index("passage")] = antigen.passage
        data[ag_row][ag_col.index("lab_id")] = antigen.lab_id

    #     for (const auto sr_no : range_from_0_to(extractor_->number_of_sera())) {
    #         auto titer = extractor_->titer(ag_no, sr_no)
    #         acmacs::data_fix::Set::fix_titer(titer, ag_no, sr_no)
    #         switch (const auto fields = acmacs::string::split(titer, "/") fields.size()) {
    #             case 2:
    #                 data[ag_row][st(ag_col::base) + sr_no] = fmt::format("{:>5s} / {:>5s}", fields[0], fields[1])
    #                 break
    #             case 1:
    #             default:
    #                 data[ag_row][st(ag_col::base) + sr_no] = fmt::format("{:>5s}", titer)
    #                 break
    #         }
    #     }
    # }

    pprint.pprint(data, width=200)

    # ----------------------------------------------------------------------

    column_widths = [max(len(row[col_no]) for row in data) for col_no in range(len(data[0]))]

    # ----------------------------------------------------------------------

    assay_date = extractor.format_assay_data("{table_date:%Y-%m-%d}")
    print(f"""# -*- Org -*-

- Lab: {extractor.lab()}
- Date: {assay_date}
- Assay: {extractor.assay()}
- Subtype: {extractor.subtype_without_lineage()}""", file=output)

    if rbc := extractor.rbc():
        print(f"- Rbc: {rbc}", file=output)
    if lineage := extractor.lineage():
        print(f"- Lineage: {lineage}", file=output)
    print("", file=output)

    if titer_comment := extractor.titer_comment():
        print(f"titer value in the table: {titer_comment}\n", file=output)

    for row in data:
        print("|", end="", file=output)
        for col_no in range(len(row)):
            print(f"{row[col_no]:{column_widths[col_no]}s} |", end="", file=output)
        print("", file=output)

    print("""
* COMMENT local vars ----------------------------------------------------------------------
:PROPERTIES:
:VISIBILITY: folded
:END:

#+STARTUP: showall indent
Local Variables:
eval: (if (fboundp 'eu-whocc-torg-to-ace) (add-hook 'after-save-hook 'eu-whocc-torg-to-ace nil 'local))
eval: (if (fboundp 'eu-whocc-xlsx-torg-ace-hup) (add-hook 'after-save-hook 'eu-whocc-xlsx-torg-ace-hup nil 'local))
End:""", file=output)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("filenames", nargs="+", type=Path, metavar="file.xlsx")
    parser.add_argument("-o", "--output-dir", dest="output_dir", type=Path)
    parser.add_argument("-n", "--assay-information", dest="assay_information", action="store_true", help="print assay information fields according to format (-f or --format)")
    parser.add_argument("-f", "--format", dest="format", default="{virus_type_lineage}-{assay_low_rbc}-{lab_low}-{table_date:%Y%m%d}", help="print assay information fields: {virus_type} {lineage} {virus_type_lineage} {virus_type_lineage_subset_short_low} {assay_full} {assay_low} {assay_low_rbc} {lab} {lab_low} {rbc} {table_date}")
    parser.add_argument("--serum-name-row", dest="serum_name_row", type=int, help="force serum name row (1 based)")
    parser.add_argument("--serum-passage-row", dest="serum_passage_row", type=int, help="force serum passage row (1 based)")
    parser.add_argument("--serum-id-row", dest="serum_id_row", type=int, help="force serum id row (1 based)")
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
