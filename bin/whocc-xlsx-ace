#! /usr/bin/env python3

import sys, os, subprocess, pprint, argparse, traceback
from pathlib import Path
import ae_backend
import ae.whocc.torg, ae.whocc.ace, ae.whocc.table_dir
import ae.utils.load_module, ae.utils.open_file, ae.utils.json

SEP = "> ===================================================================================================="

class Error (RuntimeError): pass

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    detect_m = ae.utils.load_module.load(ae.whocc.table_dir.detect_pathname())
    for source in args.filenames:
        workbook = ae_backend.whocc.xlsx.open(source)
        for sheet_no in range(workbook.number_of_sheets()):
            sheet = workbook.sheet(sheet_no)
            # print(f">>>> sheet {sheet_no} name: \"{sheet.name()}\" {sheet.number_of_rows()}:{sheet.number_of_columns()}")
            detected = detect_m.detect(sheet)
            # print(detected)
            extractor = ae_backend.whocc.xlsx.extractor(sheet, detected)
            if extractor:
                target_xlsx = check_output_existance(extractor=extractor, output_dir=args.output_dir, overwrite=args.overwrite)
                if target_xlsx.exists():
                    target_xlsx.unlink()
                target_xlsx.hardlink_to(source)
                if args.serum_name_row is not None:
                    extractor.force_serum_name_row(args.serum_name_row - 1)
                if args.serum_passage_row is not None:
                    extractor.force_serum_passage_row(args.serum_passage_row - 1)
                if args.serum_id_row is not None:
                    extractor.force_serum_id_row(args.serum_id_row - 1)
                    print(">>>", extractor.format_assay_data(args.format), file=sys.stderr)
                if not args.assay_information:
                    extractor.report_data_anchors()
                    extractor.check_export_possibility()
                    info = ae.whocc.torg.export_to_file(extractor, args.output_dir)
                    print(info)
                    if args.make_ace:
                        ace_filename, ace_prn_read_filename = ae.whocc.table_dir.subtype_assay_lab_ace_pathname(extractor=extractor, prn_read=info["assay"] == "PRN" and info["multivalue_titer"], ace_dir=args.output_dir)
                        torg_to_ace(torg_filename=info["torg_filename"], ace_filename=ace_filename, prn_read=False, prn_remove_concentration=False, check_by_seqdb=True, check_by_hidb=True)
                        if ace_prn_read_filename:
                            torg_to_ace(torg_filename=info["torg_filename"], ace_filename=ace_prn_read_filename, prn_read=True, prn_remove_concentration=False, check_by_seqdb=False, check_by_hidb=False)
            else:
                print(f">> no extractor for sheet {sheet_no}", file=sys.stderr)

# ----------------------------------------------------------------------

def torg_to_ace(torg_filename: Path, ace_filename: Path, prn_read: bool = False, prn_remove_concentration: bool = False, check_by_seqdb: bool = True, check_by_hidb: bool = True):
    ace_data = ae.whocc.torg.to_ace(torg_filename=torg_filename, prn_read=prn_read, prn_remove_concentration=prn_remove_concentration)
    ae.whocc.ace.DataFixer(ace_data).process()
    with ae.utils.open_file.for_writing(ace_filename) as output:
        output.write(ae.utils.json.dumps(ace_data, indent=2).encode("utf-8"))

    chart = ae_backend.chart_v2.Chart(ace_filename)
    print(f"\n{SEP}\n{chart.make_name()}\n{chart.table_as_text()}", end="")
    if check_by_seqdb:
        # chart.populate_from_seqdb()
        sequenced_antigens = chart.select_all_antigens().filter_sequenced() # auto-populated
        sequenced_sera = chart.select_all_sera().filter_sequenced() # auto-populated
        print(f"Sequenced:\n  Antigens: {len(sequenced_antigens):3d} of {chart.number_of_antigens():3d}\n  Sera:     {len(sequenced_sera):3d} of {chart.number_of_sera():3d}")
    print(f"{SEP}\n")

    if check_by_hidb:
        cmd = ["whocc-check-new-tables", str(ace_filename)]
        print(f">> $ {' '.join(cmd)}")
        subprocess.check_call(cmd)

# ----------------------------------------------------------------------

def check_output_existance(extractor: ae_backend.whocc.xlsx.Extractor, output_dir: Path, overwrite: bool):
    exist = []
    if (xlsx := ae.whocc.table_dir.subtype_assay_lab_xlsx_pathname(extractor=extractor, xlsx_dir=output_dir)).exists():
        exist.append(str(xlsx))
    if (torg := ae.whocc.table_dir.subtype_assay_lab_torg_pathname(extractor=extractor, torg_dir=output_dir)).exists():
        exist.append(str(torg))
    ace, ace_prn = ae.whocc.table_dir.subtype_assay_lab_ace_pathname(extractor=extractor, ace_dir=output_dir)
    if ace.exists():
        exist.append(str(ace))
    if exist:
        exist_list = "    " + "\n    ".join(exist)
        if overwrite:
            print(">> Output files exist and will be overwritten:\n>>  " + "\n>>  ".join(exist), file=sys.stderr)
        else:
            raise Error("Output files exist:\n>   " + "\n>   ".join(exist))
    return xlsx

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("filenames", nargs="+", type=Path, metavar="file.xlsx")
    parser.add_argument("-o", "--output-dir", dest="output_dir", type=Path)
    parser.add_argument("-n", "--assay-information", dest="assay_information", action="store_true", help="print assay information fields according to format (-f or --format)")
    parser.add_argument("-f", "--format", dest="format", default="{virus_type_lineage}-{assay_low_rbc}-{lab_low}-{table_date:%Y%m%d}", help="print assay information fields: {virus_type} {lineage} {virus_type_lineage} {virus_type_lineage_subset_short_low} {assay_full} {assay_low} {assay_low_rbc} {lab} {lab_low} {rbc} {table_date}")
    parser.add_argument("--serum-name-row", dest="serum_name_row", type=int, help="force serum name row (1 based)")
    parser.add_argument("--serum-passage-row", dest="serum_passage_row", type=int, help="force serum passage row (1 based)")
    parser.add_argument("--serum-id-row", dest="serum_id_row", type=int, help="force serum id row (1 based)")
    parser.add_argument("--overwrite", action="store_true")
    parser.add_argument("--no-ace", action="store_false", dest="make_ace", default=True)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Error as err:
    print(f"> {err}", file=sys.stderr)
    exit_code = 1
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 2
exit(exit_code)

# ======================================================================
