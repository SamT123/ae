#! /usr/bin/env python3
import os, sys, re, json, pprint, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    if args.report or args.common_only:
        print(f">> Use chart-merge-titer-report to report titer merging", file=sys.stderr)
        exit(1)
    merge_settings = {"match": args.match, "merge_type": args.merge_type, "combine_cheating_assays": args.combine_cheating_assays}
    if len(args.chart) < 2:
        raise ValueError("too few source charts")
    merge = None
    for chart_file in args.chart:
        chart = ae_backend.chart_v3.Chart(chart_file)
        if args.duplicates_distinct:
            chart.duplicates_distinct()
        if merge is not None:
            print(report_chart(merge), report_chart(chart), sep="\n", end="\n\n")
            merge, merge_data = ae_backend.chart_v3.merge(merge, chart, **merge_settings)
            print(merge_data.common())
            # print(merge_data.report(merge))
            print("-" * 70, end="\n\n")
        else:
            merge = chart
    print(report_chart(merge), end="\n\n")
    if args.output:
        merge.write(args.output)
    # if args.report:
    #     if args.common_only:
    #         print(report.titer_merge_report_common_only(merge))
    #     else:
    #         print(report.titer_merge_report(merge))

# ----------------------------------------------------------------------

def report_chart(chart: ae_backend.chart_v3.Chart):
    return f"{chart.name()} {chart.number_of_antigens()}:{chart.number_of_sera()}"

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("chart", nargs="+", type=Path)

    parser.add_argument("-o", "--output", type=Path)
    parser.add_argument("--match", default="auto", choices=["strict", "relaxed", "ignored", "auto"])
    parser.add_argument("--merge-type", default="simple", choices=["type1", "simple", "type2", "incremental", "type3", "overlay", "type4", "type5"])
    parser.add_argument("--combine-cheating-assays", action="store_true", default=False, help="combine tables if they have the same reference titers")
    parser.add_argument("--duplicates-distinct", action="store_true", default=False, help="make duplicating antigens/sera distinct")
    parser.add_argument("--report", action="store_true", default=False, help="Use chart-merge-titer-report")
    parser.add_argument("--common-only", action="store_true", default=False, help="Use chart-merge-titer-report")

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
