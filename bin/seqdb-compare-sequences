#! /usr/bin/env python3
"""
Seqdb compare sequences
"""

import os, sys, collections, json, subprocess, pprint, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

sAllSubtypes = ["B", "A(H1N1)", "A(H3N2)"]

# ----------------------------------------------------------------------

class Group:

    class Seq:

        def __init__(self, seq, nuc: bool):
            self.seq_id = seq.seq_id()
            self.seq = getattr(seq, "nuc" if nuc else "aa")

    def __init__(self, name: str, seqs: list, nuc: bool):
        self.name = name
        self.seqs = [self.Seq(seq=seq, nuc=nuc) for seq in seqs]
        self.longest = max(len(seq.seq) for seq in self.seqs)
        self.counters = [collections.Counter(seq.seq[pos] for seq in self.seqs if len(seq.seq) >= pos) for pos in range(1, self.longest + 1)]

    def most_frequent(self, positions: list):
        return {pos: self.counters[pos].most_common(1)[0] for pos in positions}

    def make_summary(self, positions: list, most_frequent: dict, threshold: float):
        num_rows = max(len(cnt) for cnt in self.counters)
        rows = []
        for row_no in range(num_rows):
            name = self.name if row_no == 0 else ""
            if row_no == 0 and most_frequent:
                def format_pos(source, pos):
                    return "." if source == most_frequent[pos][0] else source
                rows.append([name] + [format_pos(self.counters[pos].most_common()[row_no][0], pos=pos) for pos in positions])
            else:
                def format_pos(source):
                    if row_no < len(source):
                        return source[row_no][0]
                    else:
                        return " "
                rows.append([name] + [format_pos(self.counters[pos].most_common()) for pos in positions])
        return rows

    def __repr__(self):
        return f"{self.name}:{{seqs: {len(self.seqs)} }}"

    def format_json(self, positions: list):
        return {
            "name": self.name,
            "pos1": {str(pos0+1): [{"a": aa, "c": count} for aa, count in self.counters[pos0].most_common()] for pos0 in positions},
            "seq": [{"id": seq.seq_id, "seq": str(seq.seq)} for seq in self.seqs]
        }

# ----------------------------------------------------------------------

class Groups:

    def __init__(self, sources: dict, nuc: bool):
        self.subtype = sources.get("subtype")
        self.lineage = sources.get("lineage")
        self.groups = [Group(name=group, seqs=[s2 for s1 in (self.name_to_seq(name, sources) for name in names) for s2 in s1], nuc=nuc) for group, names in sources["groups"].items()]

    def name_to_seq(self, name: str, sources: dict):

        def find(subtype: str):
            look_for = name[len(subtype) + 1:] if name.startswith(f"{subtype}/") else name
            selected = ae_backend.seqdb.for_subtype(subtype).select_all()
            selected.exclude_with_issue(do_not_exclude_too_short=True)
            selected.filter_name([look_for.upper()])
            selected.find_masters()
            if selected:
                return list(selected)
            else:
                return None

        subtypes = [sources["subtype"]] if sources.get("subtype") else sAllSubtypes
        data = None
        for subtype in subtypes:
            if data := find(subtype):
                if not sources.get("subtype"):
                    sources["subtype"] = subtype
                break
        if not data:
            print(f">> \"{name}\": nothing selected", file=sys.stderr)
        # for en in data:
        #     print(en["seq_id"], len(en["seq"]))
        return data

    def positions_to_report(self):
        merged_counters = {pos: collections.Counter() for pos in range(max(gr.longest for gr in self.groups))}
        for group in self.groups:
            for pos in range(len(group.counters)):
                merged_counters[pos].update(group.counters[pos])
        return [pos for pos, cnt in merged_counters.items() if len(cnt) > 1]

    def format_summary(self, threshold: float = None):
        positions = self.positions_to_report()
        # print(f">>>> {positions}", file=sys.stderr)
        rows = [["", *(f"{pos + 1:3d}" for pos in positions)]]
        most_frequent = self.groups[0].most_frequent(positions=positions)
        for no, group in enumerate(self.groups):
            rows += group.make_summary(positions=positions, most_frequent=None if no == 0 else most_frequent, threshold=threshold)
        # pprint.pprint(rows, width=300)
        return format_table(rows)

    def format_json(self):
        positions = self.positions_to_report()
        data = {
            "pos1": [(pos0 + 1) for pos0 in positions],
            "groups": [group.format_json(positions) for group in self.groups],
        }
        return json.dumps(data, indent=1)

# ----------------------------------------------------------------------

def format_table(rows, column_space: int = 2):
    col_width = [0 for col in rows[0]]
    for row in rows:
        for no, col in enumerate(row):
            col_width[no] = max(col_width[no], len(col))
    output = ""
    col_space = " " * column_space
    for row in rows:
        output += f"{row[0]:<{col_width[0]}}"
        for no, col in enumerate(row[1:], start=1):
            output += f"{col_space}{col:^{col_width[no]}}"
        output += "\n"
    return output

# ----------------------------------------------------------------------

sSubtypeFix = {"B": "B", "BVIC": "B", "BV": "B", "BY": "B", "BYAM": "B", "A(H1N1)": "A(H1N1)", "H1": "A(H1N1)", "1": "A(H1N1)", "A(H3N2)": "A(H3N2)", "H3": "A(H3N2)", "3": "A(H3N2)"}

def main(args: argparse.Namespace):
    groups = Groups(sources=args_to_groups(args.seq_id), nuc=args.nuc)
    # pprint.pprint(groups.groups)
    if args.html:
        data_json = groups.format_json()
        with args.html.open("w") as out:
            var_name_suffix = args.html.stem.replace("-", "_")
            out.write(make_html(data_json=data_json, var_name=f"compare_sequences_{var_name_suffix}"))
        if args.open:
            subprocess.call(["/usr/bin/open", str(args.html)])
    else:
        print(groups.format_summary())

# ----------------------------------------------------------------------

def args_to_groups(args: list):
    subtype = (args and sSubtypeFix.get(args[0].upper())) or None
    if subtype and subtype[0] == "B" and len(subtype) > 1:
        lineage = subtype[1]
    else:
        lineage = None
    groups = {}
    group = "A"
    for name in (args[1:] if subtype else args):
        if name[0] == ":":
            group = name[1:] or chr(ord("A") + len(groups))
        else:
            groups.setdefault(group, []).append(name)
    return {"subtype": subtype, "lineage": lineage, "groups": groups}

# ----------------------------------------------------------------------

sHTML = """
<html>
 <head>
  <meta charset="utf-8" />
  <title>Compare sequences</title>
  <style>
   %(amino_acid_nucleotide_color_css)s
  </style>
  <style>
   %(compare_sequences_css)s
  </style>
  <script>
   %(data)s
  </script>
  <script>
   %(compare_sequences_js)s
  </script>
  <script>
   document.addEventListener("DOMContentLoaded", function() { compare_sequences(%(var_name)s); });
  </script>
 </head>
 <body>
  <h2>Compare sequences</h2>
  <div id="compare-sequences" class="compare-sequences">
      <div class="clear-differences"></div>
      <div class="most-frequent-per-group"></div>
      <div class="frequency-per-group"></div>
      <div class="positions-with-diversity"></div>
      <div class="full-sequences"></div>
  </div>
 </body>
</html>
"""

sAmino_acid_nucleotide_color_css = """
    .aaD {color: #F7CF08} /* negative */
    .aaE {color: #CD8D00}

    .aaR {color: #B2A1FF} /* positive */
    .aaH {color: #7571BC}
    .aaK {color: #440FAE}

    .aaN {color: #18E0F7} /* polar uncharged */
    .aaQ {color: #0080FF}
    .aaS {color: #0F52BA}
    .aaT {color: #000080}

    .aaC {color: #00F000} /* special */
    .aaG {color: #04CBB1}
    .aaP {color: #1A4F30}

    .aaA {color: #EB1919} /* hydrophobic */
    .aaI {color: #F93BBB}
    .aaL {color: #FF2976}
    .aaM {color: #FF5A3D}
    .aaF {color: #C34822}
    .aaW {color: #A30000}
    .aaY {color: #941651}
    .aaV {color: #681226}

    .aaX {color: #808080}

    .nucA {color: #0080FF}
    .nucC {color: #4CBB17}
    .nucG {color: #EB1919}
    .nucT {color: #CD8D00}
"""

sCompare_sequences_css = """
.compare-sequences .title { font-size: 1.2em; font-weight: bold; margin: 2em 0 0 0; }
.compare-sequences table { border-collapse: collapse; }

.compare-sequences td.group-name { white-space: nowrap; vertical-align: top; font-weight: bold; padding-right: 1em; }
.compare-sequences td.seq-id { white-space: nowrap; padding-right: 1em; }
.compare-sequences tr.group-space { background: #F8F8F8; }
.compare-sequences tr.group-space td { padding-top: 0.5em;  }

.full-sequences td.sep-left-zero { border-left: 1px solid #C0C0C0; }
.full-sequences td.sep-left-six { border-left: 1px solid #E0E0E0; }
.full-sequences .aa { padding: 0.1em; vertical-align: middle; font-family: monospace; font-size: 1.2em; }
.full-sequences .aa-ruler { text-align: center; }
.full-sequences td.seq-id { white-space: nowrap; }

.positions-with-diversity .aa { padding: 0.1em 0.7em; vertical-align: middle; font-family: monospace; font-size: 1.2em; }
.positions-with-diversity .position-ruler { text-align: center; }
.positions-with-diversity td.sep-left-six { border-left: 1px solid #E0E0E0; }

.clear-differences .aa { padding: 0.1em 0.7em; vertical-align: middle; font-family: monospace; font-size: 1.2em; }
.clear-differences .position-ruler { text-align: center; }
.clear-differences td.sep-left-six { border-left: 1px solid #E0E0E0; }

.most-frequent-per-group .aa { padding: 0.1em 0.7em; vertical-align: middle; font-family: monospace; font-size: 1.2em; }
.most-frequent-per-group .position-ruler { text-align: center; }
.most-frequent-per-group td.sep-left-six { border-left: 1px solid #E0E0E0; }

.frequency-per-group .aa { padding: 0.1em 0.7em; vertical-align: middle; font-family: monospace; font-size: 1.2em; }
.frequency-per-group .aa-and-count { padding: 0.1em 0.7em; vertical-align: middle; }
.frequency-per-group .aa-count { color: #808080; text-align: right; }
.frequency-per-group .position-ruler { text-align: center; }
.frequency-per-group td.sep-left-six { border-left: 1px solid #E0E0E0; }

/* highlight column https://css-tricks.com/simple-css-row-column-highlighting/ */
table { overflow: hidden; }
tr:hover { background: #f8f8ff; border: 1px solid #a0a0ff; }
td { position: relative; }
td:hover::after {
    content: ""; position: absolute;
    background-color: #f8f8ff;
    border: 1px solid #a0a0ff;
    left: 0; top: -5000px; height: 10000px; width: 100%; z-index: -1;
}
"""

sCompare_sequences_js = """
function compare_sequences(compare_sequences_data)
{
    // console.log("compare_sequences_data", compare_sequences_data);
    show_clear_differences(compare_sequences_data, document.querySelector("#compare-sequences .clear-differences"));
    show_most_frequent_per_group(compare_sequences_data, document.querySelector("#compare-sequences .most-frequent-per-group"));
    show_frequency_per_group(compare_sequences_data, document.querySelector("#compare-sequences .frequency-per-group"));
    show_positions_with_diversity(compare_sequences_data, document.querySelector("#compare-sequences .positions-with-diversity"));
    show_full_sequences(compare_sequences_data, document.querySelector("#compare-sequences .full-sequences"));
}

// --------------------------------------------------------------------------------

function show_full_sequences(compare_sequences_data, div)
{
    const find_master = function(group) {
        let index = 0;
        for (const seq of group.seq) {
            if (Object.keys(group.pos1).every(function(pos1) { return group.pos1[pos1][0].a == seq.seq[pos1 - 1]; }))
                return index;
            ++index;
        }
        console.warn("master not found");
        return 0;
    };

    // move master sequence (the one having most frequent aas at all positions) to the first element of the group
    const rearrange_group = function(group) {
        const master_index = find_master(group);
        if (master_index > 0)
            group.seq.splice(0, 0, group.seq.splice(master_index, 1)[0]);
    };

    const add_sequence = function(tr, seq_s, master) {
        const seq = [...seq_s];
        seq.forEach(function(aa, pos0) {
            aa = normalize_aa(aa);
            const aa_td = document.createElement("td");
            aa_td.classList.add(`aa${aa}`);
            aa_td.classList.add("aa");
            if (pos0 % 10 == 9)
                aa_td.classList.add("sep-left-zero");
            else if (pos0 % 10 == 4)
                aa_td.classList.add("sep-left-six");
            if (master.length > pos0 && aa == master[pos0])
                aa_td.innerHTML = '&#xB7;';
            else
                aa_td.innerHTML = aa;
            tr.appendChild(aa_td);
        });
    };

    const add_ruler = function() {
        const tr = document.createElement("tr");
        tr.classList.add("aa-ruler");
        tr.innerHTML = `<td colspan="2"></td>`; // group-name + sequence-name
        for (let pos1 = 1; pos1 < 550; ++pos1) {
            const td = document.createElement("td");
            if (pos1 % 10 == 0) {
                td.classList.add("sep-left-zero");
                let pos_s = "" + pos1;
                td.innerHTML = pos_s;
                td.setAttribute("colspan", pos_s.length);
                pos1 += pos_s.length - 1;
            }
            else if (pos1 % 10 == 5) {
                td.classList.add("sep-left-six");
                //td.innerHTML = ".";
            }
            // else
            //     td.innerHTML = ".";
            tr.appendChild(td);
        }
        return tr;
    };

    // ----------------------------------------------------------------------

    const title = document.createElement("p");
    title.classList.add("title");
    title.innerHTML = "Full sequences";
    div.appendChild(title);

    rearrange_group(compare_sequences_data.groups[0]);

    const tab1 = document.createElement("table");
    tab1.appendChild(add_ruler());
    for (let group of compare_sequences_data.groups) {
        group.seq.forEach(function(id_seq, index) {
            const is_master = id_seq.id == compare_sequences_data.groups[0].seq[0].id;
            if (index == 0 && !is_master) {
                const tr_space = document.createElement("tr");
                tr_space.classList.add("group-space");
                tr_space.innerHTML = `<td colspan="${id_seq.seq.length + 2}"></td>`;
                tab1.appendChild(tr_space);
            }
            const tr = document.createElement("tr");
            if (index == 0)
                tr.innerHTML = `<td class="group-name" rowspan="${group.seq.length}">${group.name}</td><td class="seq-id">${id_seq.id}</td>`;
            else
                tr.innerHTML = `<td class="seq-id">${id_seq.id}</td>`;
            add_sequence(tr, id_seq.seq, is_master ? "" : compare_sequences_data.groups[0].seq[0].seq);
            tab1.appendChild(tr);
        });
    }
    tab1.appendChild(add_ruler());
    div.appendChild(tab1);
}

// --------------------------------------------------------------------------------

function position_ruler(positions, initial_tds)
{
        const tr = document.createElement("tr");
        tr.classList.add("position-ruler");
        tr.innerHTML = `<td colspan="${initial_tds}"></td>`; // group-name + sequence-name
        positions.forEach(function(pos1, index) {
            const td = document.createElement("td");
            if (index > 0 && (index % 10 == 0 || index % 10 == 5))
                td.classList.add("sep-left-six");
            td.innerHTML = "" + pos1;
            tr.appendChild(td);
        });
        return tr;
}

// --------------------------------------------------------------------------------

function normalize_aa(aa)
{
    if (aa < "A" || aa > "Z")
        aa = "-";
    return aa;
}

// ----------------------------------------------------------------------

function show_positions(compare_sequences_data, div, positions)
{
    const add_ruler = function() { return position_ruler(positions, 2); };

    const add_sequence = function(tr, seq, master) {
        positions.forEach(function(pos1, index) {
            const pos0 = pos1 - 1;
            const aa = normalize_aa(seq[pos0]);
            const aa_td = document.createElement("td");
            aa_td.classList.add(`aa${aa}`);
            aa_td.classList.add("aa");
            if (index > 0 && (index % 10 == 0 || index % 10 == 5))
                aa_td.classList.add("sep-left-six");
            if (master.length > pos0 && aa == master[pos0])
                aa_td.innerHTML = '&#xB7;';
            else
                aa_td.innerHTML = aa;
            tr.appendChild(aa_td);
        });
    };

    // ----------------------------------------------------------------------

    const tab1 = document.createElement("table");
    tab1.appendChild(add_ruler());
    for (let group of compare_sequences_data.groups) {
        group.seq.forEach(function(id_seq, index) {
            const is_master = id_seq.id == compare_sequences_data.groups[0].seq[0].id;
            if (index == 0 && !is_master) {
                const tr_space = document.createElement("tr");
                tr_space.classList.add("group-space");
                tr_space.innerHTML = `<td colspan="${positions.length + 2}"></td>`;
                tab1.appendChild(tr_space);
            }
            const tr = document.createElement("tr");
            if (index == 0)
                tr.innerHTML = `<td class="group-name" rowspan="${group.seq.length}">${group.name}</td><td class="seq-id">${id_seq.id}</td>`;
            else
                tr.innerHTML = `<td class="seq-id">${id_seq.id}</td>`;
            add_sequence(tr, id_seq.seq, is_master ? "" : compare_sequences_data.groups[0].seq[0].seq);
            tab1.appendChild(tr);
        });
    }
    tab1.appendChild(add_ruler());
    div.appendChild(tab1);
}

// ----------------------------------------------------------------------

function show_positions_with_diversity(compare_sequences_data, div)
{
    const title = document.createElement("p");
    title.classList.add("title");
    title.innerHTML = "Positions with diversity";
    div.appendChild(title);

    show_positions(compare_sequences_data, div, compare_sequences_data.pos1);
}

// --------------------------------------------------------------------------------

function show_most_frequent_per_group(compare_sequences_data, div)
{
    const add_ruler = function() { return position_ruler(compare_sequences_data.pos1, 1); }

    const add_aas = function(tr, positions, master_positions) {
        compare_sequences_data.pos1.forEach(function(pos1, index) {
            const aa = normalize_aa(positions[pos1][0].a);
            const aa_td = document.createElement("td");
            aa_td.classList.add(`aa${aa}`);
            aa_td.classList.add("aa");
            if (index > 0 && (index % 10 == 0 || index % 10 == 5))
                aa_td.classList.add("sep-left-six");
            if (master_positions && aa == master_positions[pos1][0].a)
                aa_td.innerHTML = '&#xB7;';
            else
                aa_td.innerHTML = aa;
            tr.appendChild(aa_td);
        });
    };

    // ----------------------------------------------------------------------

    const title = document.createElement("p");
    title.classList.add("title");
    title.innerHTML = "Most frequent per group";
    div.appendChild(title);

    const tab1 = document.createElement("table");
    tab1.appendChild(add_ruler());
    compare_sequences_data.groups.forEach(function(group, index) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td class="group-name">${group.name}</td>`;
        add_aas(tr, group.pos1, index == 0 ? null : compare_sequences_data.groups[0].pos1);
        tab1.appendChild(tr);
    });
    div.appendChild(tab1);
}

// --------------------------------------------------------------------------------

function show_frequency_per_group(compare_sequences_data, div)
{
    const add_ruler = function() { return position_ruler(compare_sequences_data.pos1, 1); }

    const max_aas_per_group = function(group) {
        let max = 0;
        for (const ens of Object.values(group))
            max = Math.max(max, ens.length);
        return max;
    };

    const add_aas = function(tr, positions, row) {
        compare_sequences_data.pos1.forEach(function(pos1, index) {
            const en = positions[pos1];
            const aa_td = document.createElement("td");
            if (row < en.length) {
                aa_td.classList.add("aa-and-count");
                const aa = normalize_aa(en[row].a);
                aa_td.innerHTML = `<table><tr><td class="aa aa${aa}">${aa}</td><td class="aa-count">${en[row].c}</td></tr></table>`;
                // aa_td.classList.add(`aa${aa}`);
                // aa_td.classList.add("aa");
                // aa_td.innerHTML = aa;
            }
            else {
            }
            if (index > 0 && (index % 10 == 0 || index % 10 == 5))
                aa_td.classList.add("sep-left-six");
            tr.appendChild(aa_td);
        });
    };

    // ----------------------------------------------------------------------

    const title = document.createElement("p");
    title.classList.add("title");
    title.innerHTML = "Frequency per group";
    div.appendChild(title);

    const tab1 = document.createElement("table");
    tab1.appendChild(add_ruler());
    compare_sequences_data.groups.forEach(function(group, index) {
        if (index > 0) {
            const tr_space = document.createElement("tr");
            tr_space.classList.add("group-space");
            tr_space.innerHTML = `<td colspan="${compare_sequences_data.pos1.length + 1}"></td>`;
            tab1.appendChild(tr_space);
        }
        const n_aas = max_aas_per_group(group.pos1);
        for (let row = 0; row < n_aas; ++row) {
            const tr = document.createElement("tr");
            if (row == 0)
                tr.innerHTML = `<td class="group-name" rowspan="${n_aas}">${group.name}</td>`;
            add_aas(tr, group.pos1, row);
            tab1.appendChild(tr);
        }
    });
    div.appendChild(tab1);
}

// --------------------------------------------------------------------------------

// https://stackoverflow.com/questions/51319147/map-default-value/51321724
class MapWithDefault extends Map
{
    get(key) {
        if (!this.has(key)) this.set(key, this.default());
        return super.get(key);
    }

    constructor(defaultFunction, entries) {
        super(entries);
        this.default = defaultFunction;
    }

    increment(key) {
        this.set(key, this.get(key) + 1);
    }
}

function show_clear_differences(compare_sequences_data, div)
{
    // const add_aas = function(tr, positions, master_positions) {
    //     compare_sequences_data.pos1.forEach(function(pos1, index) {
    //         const aa = normalize_aa(positions[pos1][0].a);
    //         const aa_td = document.createElement("td");
    //         aa_td.classList.add(`aa${aa}`);
    //         aa_td.classList.add("aa");
    //         if (index > 0 && (index % 10 == 0 || index % 10 == 5))
    //             aa_td.classList.add("sep-left-six");
    //         if (master_positions && aa == master_positions[pos1][0].a)
    //             aa_td.innerHTML = '&#xB7;';
    //         else
    //             aa_td.innerHTML = aa;
    //         tr.appendChild(aa_td);
    //     });
    // };

    // ----------------------------------------------------------------------

    const pos1_mixed = new MapWithDefault(() => new MapWithDefault(() => 0));
    compare_sequences_data.groups.forEach((group, index) => {
        for (const pos1 in group.pos1) {
            const mixed = pos1_mixed.get(pos1);
            for (const aa_count of group.pos1[pos1]) {
                mixed.increment(aa_count.a);
            }
        }
    });
    const pos1_difference = new MapWithDefault(() => true);
    for (const [pos1, aa_count] of pos1_mixed.entries()) {
        for (const [aa, count] of aa_count.entries()) {
            if (count > 1)
                pos1_difference.set(pos1, false);
        }
    }
    const pos1_clear_difference = compare_sequences_data.pos1.filter((pos1) => pos1_difference.get("" + pos1));

    if (pos1_clear_difference.length) {
        const title = document.createElement("p");
        title.classList.add("title");
        title.innerHTML = "Clear differences";
        div.appendChild(title);

        show_positions(compare_sequences_data, div, pos1_clear_difference);
    }
}

// --------------------------------------------------------------------------------
"""

def make_html(data_json: str, var_name: str):
    return sHTML % {"amino_acid_nucleotide_color_css": sAmino_acid_nucleotide_color_css,
                    "compare_sequences_css": sCompare_sequences_css,
                    "data": f"{var_name} = {data_json};",
                    "compare_sequences_js": sCompare_sequences_js,
                    "var_name": var_name,
                    }


# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--html", type=Path)
    parser.add_argument("--nuc", action="store_true", default=False)
    parser.add_argument("--open", action="store_true", default=False)
    parser.add_argument("seq_id", nargs="+", help="seq-id or :<group> or :")
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
