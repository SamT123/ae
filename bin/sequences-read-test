#! /usr/bin/env python3
"""
Test reading ncbi files
"""

import os, sys, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
from ae.sequences.source import fasta, ncbi

# ----------------------------------------------------------------------

def main(args: list):
    num_seqs = 0
    messages = []
    unrecognized_locations = set()

    for filename in args.filename:
        if filename.is_dir() and filename.joinpath("influenza_na.dat.xz").exists():
            reader = ncbi.reader(filename)
        elif filename.is_file():
            reader = fasta.reader(filename)
        else:
            raise RuntimeError(f"\"{filename}\": unrecognized or does not exist")

        for metadata, sequence in reader:
            if not (excluded := metadata.get("excluded")):
                sequence.name = metadata["name"]
                sequence.accession_number = metadata.get("isolate_id") or metadata.get("sample_id_by_sample_provider")
            elif args.print_messages:
                print(f">> excluded: {metadata}")
            num_seqs += 1
        messages += reader.messages
        unrecognized_locations |= reader.unrecognized_locations

    print(f">>> {num_seqs} sequences read")
# country
# date
# gisaid_dna_accession_no
# gisaid_dna_insdc
# gisaid_identifier
# gisaid_last_modified
# gisaid_segment
# gisaid_segment_number
# isolate_id -> accession_number
# lab
# lab_id
# line_no
# lineage
# name
# originating_lab
# passage
# sample_id_by_sample_provider -> accession_number
# submitter
# type_subtype

    # print(f"Labs: {len(labs)}\n{pprint.pformat(labs)}")
    print(f"Messages: {len(messages)}")
    if args.print_messages and messages:
        for msg in messages:
            print(f"  {msg.message_raw.type_short() if msg.message_raw else ' '} {msg.field}[{msg.value}]: {msg.message} @@ {msg.filename}:{msg.line_no}")
        if unrecognized_locations:
            print(f"Unrecognized locations: {len(unrecognized_locations)}")
            for loc in unrecognized_locations:
                print(f"  {loc}")

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("filename", nargs="+", type=Path)
    parser.add_argument("-m", dest="print_messages", action='store_true', default=False)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)
