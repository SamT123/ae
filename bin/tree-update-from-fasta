#! /usr/bin/env python3
"""
Read tree from newick, fix name by seqdb, remove leaves not found in fasta, populate with new sequences from fasta, export to newick
"""

import os, sys, re, collections, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
import ae_backend
from ae.sequences.source import fasta
from ae.sequences.utils import hamming_distance

# ----------------------------------------------------------------------

sSubtypeFix = {"B": "B", "BVIC": "B", "BV": "B", "BY": "B", "BYAM": "B", "A(H1N1)": "A(H1N1)", "H1": "A(H1N1)", "1": "A(H1N1)", "A(H3N2)": "A(H3N2)", "H3": "A(H3N2)", "3": "A(H3N2)"}

def main(args: argparse.Namespace):
    tree = ae_backend.tree.load(args.input_tree)
    messages = tree.fix_names_by_seqdb(sSubtypeFix[args.subtype.upper()])
    print("\n".join(messages))

    fasta_data = fasta.read(args.input_fasta)

    # find seq_id in the tree and fasta that are different in case only
    fasta_names_upper = {name.upper(): name for name in fasta_data}
    max_name = max(len(name) for name in fasta_names_upper)
    leaves_tree_to_fasta = {leaf: fasta_names_upper[leaf.name().upper()] for leaf in tree.select_leaves() if leaf.name().upper() in fasta_names_upper and leaf.name() not in fasta_data}
    print(f"renaming in the tree (case changed) ({len(leaves_tree_to_fasta)})\n", "\n".join(f"   {leaf.name():{max_name}s}  ->  {fasta_name}" for leaf, fasta_name in leaves_tree_to_fasta.items()), sep="")
    for leaf, fasta_name in leaves_tree_to_fasta.items():
        leaf.name(fasta_name)

    # find seq_id in tree not found in fasta, remove corresponding leaves from the tree
    leaves_to_remove = [leaf for leaf in tree.select_leaves() if leaf.name() not in fasta_data]
    print(f"Removing {len(leaves_to_remove)} leaves:\n    ", "\n    ".join(leaf.name() for leaf in leaves_to_remove), sep="")
    tree.remove(leaves_to_remove)

    # find seq_id in fasta that are not in the tree
    names_in_tree = set(leaf.name() for leaf in tree.select_leaves())
    new_seq_ids = set(fasta_data) - names_in_tree
    closest_data = find_closest(tree=tree, all_sequences=fasta_data, new_seq_ids=new_seq_ids)
    print(f"Adding {len(closest_data)} leaves (soted by hamming distance to the existing closest leaf in the tree):")
    if names_sorted_by_hamming := sorted(closest_data, key=lambda nn: closest_data[nn]["dist"]):
        max_name = max(len(name) for name in names_sorted_by_hamming)
        for name in names_sorted_by_hamming:
            en = closest_data[name]
            print(f"    {name:{max_name}s} <- {en['dist']:3d} -> {en['leaf'].name()}")
            en["leaf"].add_sibling_leaf(name)

    if args.output_tree:
        ae_backend.tree.export(tree, args.output_tree)

# ----------------------------------------------------------------------

def find_closest(tree: ae_backend.tree.Tree, all_sequences: dict, new_seq_ids: set):
    data = {} # name -> {leaf: Node_Ref, dist: hamming_distance}
    for name in new_seq_ids:
        order = sorted(([ae_backend.raw_sequence.hamming_distance_raw_sequence(all_sequences[name], all_sequences[leaf.name()]), leaf] for leaf in tree.select_leaves()), key=lambda en: en[0] * 100.0 - en[1].cumulative_edge())
        data[name] = {"leaf": order[0][1], "dist": order[0][0]}
    return data

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("subtype")
    parser.add_argument("input_tree", type=Path)
    parser.add_argument("input_fasta", type=Path)
    parser.add_argument("output_tree", nargs="?", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
