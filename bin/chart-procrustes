#! /usr/bin/env python3
import os, sys, re, json, pprint, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart1 = ae_backend.chart_v3.Chart(args.chart1)
    chart2 = ae_backend.chart_v3.Chart(args.chart2)

    common = ae_backend.chart_v3.CommonAntigensSera(chart1, chart2, args.match)
    if args.subset == "antigens":
        common.antigens_only();
    elif args.subset == "sera":
        common.sera_only();
    elif args.subset != "all":
        print(f">> unrecognized --subset argument \"{args.subset}\"", file=sys.stderr)
    print(f"Common antigens: {len(common.antigens()):5d}\nCommon sera:     {len(common.sera()):5d}")
    if args.report_common:
        print(common.report())
    if not common.empty():
        procrustes_data = ae_backend.chart_v3.procrustes(chart1.projection(args.p1), chart2.projection(args.p2), common=common, scaling=args.scaling);
        print(procrustes_data)
        # fmt::print("common antigens: {} sera: {}\n", common.common_antigens(), common.common_sera());
        # fmt::print("transformation: {}\nrms: {}\n", procrustes_data.transformation, procrustes_data.rms);
    else:
        print(f"> no common antigens/sera", file=sys.stderr)

    # if args.report or args.common_only:
    #     print(f">> Use chart-merge-titer-report to report titer merging", file=sys.stderr)
    #     exit(1)
    # merge_settings = {"match": args.match, "merge_type": args.merge_type, "combine_cheating_assays": args.combine_cheating_assays}
    # if len(args.chart) < 2:
    #     raise ValueError("too few source charts")
    # merge = None
    # for chart_file in args.chart:
    #     chart = ae_backend.chart_v3.Chart(chart_file)
    #     if args.duplicates_distinct:
    #         chart.duplicates_distinct()
    #     if merge is not None:
    #         print(report_chart(merge), report_chart(chart), sep="\n", end="\n\n")
    #         merge, merge_data = ae_backend.chart_v3.merge(merge, chart, **merge_settings)
    #         print(merge_data.common())
    #         # print(merge_data.report(merge))
    #         print("-" * 70, end="\n\n")
    #     else:
    #         merge = chart

# ----------------------------------------------------------------------

def report_chart(chart: ae_backend.chart_v3.Chart):
    return f"{chart.name()} {chart.number_of_antigens()}:{chart.number_of_sera()}"

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("chart1", type=Path)
    parser.add_argument("chart2", type=Path)

    parser.add_argument("-p", "--p1", type=int, default=0, help="projection number of the first chart")
    parser.add_argument("-r", "--p2", type=int, default=0, help="projection number of the second chart")
    parser.add_argument("--match", default="auto", choices=["strict", "relaxed", "ignored", "auto"])
    parser.add_argument("--scaling", action="store_true", default=False)
    parser.add_argument("--subset", default="all", choices=["all", "antigens", "sera"])
    # parser.add_argument("--duplicates-distinct", action="store_true", default=False, help="make duplicating antigens/sera distinct")
    parser.add_argument("--report-common", action="store_true", default=False)

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
