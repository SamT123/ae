#! /usr/bin/env python3
import os, sys, re, json, pprint, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart1 = ae_backend.chart_v3.Chart(args.chart1)
    chart2 = ae_backend.chart_v3.Chart(args.chart2)

    common = ae_backend.chart_v3.CommonAntigensSera(chart1, chart2, args.match)
    if args.subset == "antigens":
        common.antigens_only();
    elif args.subset == "sera":
        common.sera_only();
    elif args.subset != "all":
        print(f">> unrecognized --subset argument \"{args.subset}\"", file=sys.stderr)
    if args.report_common:
        print(common.report())
    if not common.empty():
        procrustes_data = ae_backend.chart_v3.procrustes(chart1.projection(args.p1), chart2.projection(args.p2), common=common, scaling=args.scaling);
        print(f"Common antigens: {len(common.antigens()):5d}\nCommon sera:     {len(common.sera()):5d}\nTransformation:  {procrustes_data.transformation()}\nrms:             {procrustes_data.rms()}")
        # print(procrustes_data.secondary_transformed().minmax())
    else:
        print(f"> no common antigens/sera", file=sys.stderr)

# ----------------------------------------------------------------------

def report_chart(chart: ae_backend.chart_v3.Chart):
    return f"{chart.name()} {chart.number_of_antigens()}:{chart.number_of_sera()}"

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("chart1", type=Path)
    parser.add_argument("chart2", type=Path)

    parser.add_argument("-p", "--p1", type=int, default=0, help="projection number of the first chart")
    parser.add_argument("-r", "--p2", type=int, default=0, help="projection number of the second chart")
    parser.add_argument("--match", default="auto", choices=["strict", "relaxed", "ignored", "auto"])
    parser.add_argument("--scaling", action="store_true", default=False)
    parser.add_argument("--subset", default="all", choices=["all", "antigens", "sera"])
    # parser.add_argument("--duplicates-distinct", action="store_true", default=False, help="make duplicating antigens/sera distinct")
    parser.add_argument("--report-common", action="store_true", default=False)

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
