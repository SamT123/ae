#! /usr/bin/env python3
"""
Reading tree test
"""

import os, sys, re, collections, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    tree = ae_backend.tree.load(args.input)

    # leaves_by_cumulative = tree.select_leaves()
    # leaves_by_cumulative.sort_by_cumulative()
    # for ind in range(20):
    #     print(f"{leaves_by_cumulative.cumulative_edge(ind):.8f}  {leaves_by_cumulative.node_id(ind):5d} {leaves_by_cumulative.name(ind)}")

    to_remove = tree.select_leaves()
    to_remove.filter_by_cumulative_more_than(0.1)
    for ind in range(len(to_remove)):
        print(f"{to_remove.cumulative_edge(ind):.8f}  {to_remove.node_id(ind):5d} {to_remove.name(ind)}")
    to_remove.remove()

    tree.populate_with_duplicates("B")
    tree.populate_with_sequences("B")
    # tree.set_clades(os.environ["AC_CLADES_JSON_V2"])
    if args.output:
        ae_backend.tree.export(tree, args.output)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", type=Path)
    parser.add_argument("output", nargs="?", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
