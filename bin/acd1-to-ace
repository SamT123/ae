#! /usr/bin/env python3
import os, sys, json, lzma, datetime, argparse, traceback
from pathlib import Path


# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart = read(args.input)
    output = make_ace(chart)
    if args.output is None:
        print(output)
    else:
        with args.output.open("w") as out:
            out.write(output)

# ----------------------------------------------------------------------

def read(filename: Path):
    if not filename:
        source = sys.stdin.read()
    elif filename.suffix == '.xz':
        source = lzma.open(filename).read()
    else:
        source = filename.open().read()
    globls = {}
    chart = exec(source, globls)
    return globls["data"]

# ----------------------------------------------------------------------

def make_ace(chart: dict):
    ace = {
        "  version": "acmacs-ace-v1",
        "?created": Path(sys.argv[0]).name,
        "c": {
            "i": get_info(chart["chart_info"]),
            "a": [make_antigen(ag) for ag in chart["table"]["antigens"]],
            "s": [make_serum(sr) for sr in chart["table"]["sera"]],
            "t": make_titers(chart["table"]["titers"]),
        }
    }
    if chart["chart_info"].get("sources"):
        ace["c"]["i"]["S"] = [get_info(src) for src in chart["chart_info"]["sources"]]
    if chart["table"].get('column_bases'):
        ace["c"]["C"] = chart["table"]['column_bases']
    if chart.get('projections'):
        ace["c"]["P"] = [make_projection(src) for src in chart['projections']]
    if chart.get('plot_spec'):
        ace["c"]["p"] = make_plot_spec(chart['plot_spec'])
    return json.dumps(ace, indent=1)

# ----------------------------------------------------------------------

def get_info(source: dict):
    return remove_nulls({
        "v": source.get("virus"),
        "V": source.get("virus_type") or source.get("flu_type"),
        "A": source.get("assay"),
        "D": source.get("date"),
        "N": source.get("name"),
        "l": source.get("lab"),
        "r": source.get("rbc_species"),
        "s": source.get("virus_subset") or source.get("flu_subset"),
    })

# ----------------------------------------------------------------------

def make_antigen(source: dict):
    return remove_nulls({
        "N": make_name(source),
        "a": make_annotations(source),
        "D": source.get("date"),
        "L": source.get("lineage"),
        "P": make_passage(source),
        "R": make_reassortant(source),
        "l": ["#".join(en) for en in source.get('lab_id', [])] or None,
    })

# ----------------------------------------------------------------------

def make_serum(source: dict):
    return remove_nulls({
        "N": make_name(source),
        "a": make_annotations(source),
        "s": source.get("serum_species"),
        "L": source.get("lineage"),
        "P": make_passage(source),
        "R": make_reassortant(source),
        "I": source.get("serum_id") and source["serum_id"].get("serum_id"),
    })

# ----------------------------------------------------------------------

def make_name(source: dict):
    host = source.get('host')
    if host == "HUMAN":
        host = None
    return source.get("name") or "/".join(val for val in [
        source.get('virus_type'),
        host,
        source.get('location', {}).get('name'),
        source.get('isolation_number'),
        source.get('year')
    ] if val)

# ----------------------------------------------------------------------

def make_passage(source: dict):
    passage_d = source.get("passage")
    if passage_d:
        passage = passage_d.get("passage")
        date = passage_d.get("date")
        if passage and date:
            return passage + " (" + date + ")"
        else:
            return passage
    else:
        return None

# ----------------------------------------------------------------------

def make_reassortant(source: dict):
    reassortant_d = source.get("reassortant")
    if reassortant_d:
        return " ".join([*reassortant_d.get("complete", []), *reassortant_d.get("inccomplete", [])])
    else:
        return None

# ----------------------------------------------------------------------

def make_annotations(source: dict):
    ann = []
    if source.get("distinct"):
        ann.append("DISTINCT")
    if source.get("extra"):
        ann.append(source["extra"])
    return ann or None

# ----------------------------------------------------------------------

def make_titers(source: dict):
    titers = {}
    layers = source.get('layers_dict_for_antigen')
    if layers:
        titers["L"] = layers
    titers_list_of_list = source.get('titers_list_of_list')
    if titers_list_of_list:
        titers["l"] = titers_list_of_list
    titers_list_of_dict = source.get('titers_list_of_dict')
    if titers_list_of_dict:
        titers["d"] = titers_list_of_dict
    return titers

# ----------------------------------------------------------------------

def make_plot_spec(source: dict):
    return remove_nulls({
        "d": [en2 for en in source.get("drawing_order", [[]]) for en2 in en] or None,
        "p": source.get('points'),
        "s": source.get('shown_on_all') or None,
        "P": [make_style(style) for style in source.get('styles', [])] or None,
    })

# ----------------------------------------------------------------------

def make_style(source: dict):
    shape = source.get('shape', "").upper() or None
    if shape == "CIRCLE":
        shape = None
    rotation = source.get("rotation")
    if rotation == 0.0:
        rotation = None
    aspect = source.get("aspect")
    if aspect == 1.0:
        aspect = None
    return remove_nulls({
        "+": source.get("shown"),
        "F": make_color(source.get('fill_color'), 0xFF000000),
        "O": make_color(source.get('outline_color'), 0),
        "o": source.get("outline_width"),
        "S": shape,
        "s": source.get("size"),
        "r": rotation,
        "a": aspect,
    })

# ----------------------------------------------------------------------

def make_color(source, dflt):
    if source == dflt:
        return None
    elif isinstance(source, int):
        return "#{:06X}".format(source)
    else:
        return source

# ----------------------------------------------------------------------

def make_projection(source: dict):
    return remove_nulls({
        "c": source.get("comment"),
        "l": source.get("layout"),
        "s": source.get("stress"),
        "t": [tt for en in (source.get('transformation') or []) for tt in en] or None,
        "m": (source.get('stress_evaluator_parameters') or {}).get('minimum_column_basis'),
        "C": (source.get('stress_evaluator_parameters') or {}).get('column_bases'),
        "d": (source.get('stress_evaluator_parameters') or {}).get('dodgy_titer_is_regular') or None,
        # "e" | float             | stress_diff_to_stop                                                                                                                                            |
        # "U" | array of integers | list of indices of unmovable points (antigen/serum attribute for stress evaluation)                                                                            |
        # "D" | array of integers | list of indices of disconnected points (antigen/serum attribute for stress evaluation)                                                                         |
        # "u" | array of integers | list of indices of points unmovable in the last dimension (antigen/serum attribute for stress evaluation)                                                      |
        # "g" | array of floats   | antigens_sera_gradient_multipliers, float for each point                                                                                                       |
        # "f" | array of floats   | avidity adjusts (antigens_sera_titers_multipliers), float for each point                                                                                       |
    })

# ----------------------------------------------------------------------

def remove_nulls(source: dict):
        return {k: v for k, v in source.items() if v is not None}

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", nargs="?", type=Path, default=None)
    parser.add_argument("output", nargs="?", type=Path, default=None)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
