#! /usr/bin/env python3
import os, sys, json, lzma, datetime, argparse, traceback
from pathlib import Path


# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart = read(args.input)
    output = make_ace(chart)
    if args.output is None:
        print(output)
    else:
        with args.output.open("w") as out:
            out.write(output)

# ----------------------------------------------------------------------

def read(filename: Path):
    if not filename:
        source = sys.stdin.read()
    elif filename.suffix == '.xz':
        source = lzma.open(filename).read()
    else:
        source = filename.open().read()
    globls = {}
    chart = exec(source, globls)
    return globls["data"]

# ----------------------------------------------------------------------

def make_ace(chart: dict):
    ace = {
        "  version": "acmacs-ace-v1",
        "?created": Path(sys.argv[0]).name,
        "c": {
            "i": get_info(chart["chart_info"]),
            "a": [make_antigen(ag) for ag in chart["table"]["antigens"]],
            "s": [
                ],
            "t": {
                },
            }
    }
    if chart["chart_info"].get("sources"):
        ace["c"]["i"]["S"] = [get_info(src) for src in chart["chart_info"]["sources"]]
    return json.dumps(ace, indent=1)

# ----------------------------------------------------------------------

def get_info(source: dict):
    return remove_nulls({
        "v": source.get("virus"),
        "V": source.get("virus_ty") or source.get("flu_type"),
        "A": source.get("assay"),
        "D": source.get("date"),
        "N": source.get("name"),
        "l": source.get("lab"),
        "r": source.get("rbc_species"),
        "s": source.get("virus_subset") or source.get("flu_subset"),
    })

# ----------------------------------------------------------------------

def make_antigen(source: dict):
    return remove_nulls({
        "N": make_name(source),
         "a": "", # array of str                     | annotations that distinguish antigens (prevent from merging): ["DISTINCT"], mutation information, unrecognized extra data                                      |
         "D": source.get("date"),
         "L": source.get("lineage"),
         "P": make_passage(source),
         "R": "", # str                              | reassortant, e.g. "NYMC-51C"                                                                                                                                   |
         "l": "", # array of str                     | lab ids ([lab#id]), e.g. ["CDC#2013706008"]                                                                                                                    |
         "A": "", # str                              | aligned amino-acid sequence                                                                                                                                    |
         "B": "", # str                              | aligned nucleotide sequence                                                                                                                                    |
         "s": "", # key-value  pairs                 | semantic attributes by group (see below the table)                                                                                                             |
         "C": "", # str                              | (DEPRECATED, use "s") continent: "ASIA", "AUSTRALIA-OCEANIA", "NORTH-AMERICA", "EUROPE", "RUSSIA", "AFRICA", "MIDDLE-EAST", "SOUTH-AMERICA", "CENTRAL-AMERICA" |
         "c": "", # array of str                     | (DEPRECATED, use "s") clades, e.g. ["5.2.1"]                                                                                                                   |
         "S": "", # str                              | (DEPRECATED, use "s") single letter semantic boolean attributes: R - reference, E - egg, V - current vaccine, v - previous vaccine, S - vaccine surrogate      |
    })

# ----------------------------------------------------------------------

def make_name(source: dict):
    return source.get("name") or "/".join(val for val in [
        source.get('virus_type'),
        source.get('host'),
        source.get('location', {}).get('name'),
        source.get('isolation_number'),
        source.get('year')
    ] if val)

# ----------------------------------------------------------------------

def make_passage(source: dict):
    passage_d = source.get("passage")
    if passage_d:
        passage = passage_d.get("passage")
        date = passage_d.get("date")
        if passage and date:
            return passage + " (" + date + ")"
        else:
            return passage
    else:
        return None

# ----------------------------------------------------------------------

def remove_nulls(source: dict):
        return {k: v for k, v in source.items() if v is not None}

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", nargs="?", type=Path, default=None)
    parser.add_argument("output", nargs="?", type=Path, default=None)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
