#! /usr/bin/env python3
import os, sys, re, json, pprint, argparse, traceback
from pathlib import Path
import ae_backend.chart_v3
from ae.utils.format_table import format_table
import ae.chart

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for chart_file in args.chart:
        if chart_file != args.chart[0]:
            print("\n")
        chart = ae_backend.chart_v3.Chart(chart_file)
        num_projections = chart.number_of_projections()
        print(chart.name_for_file())
        print(chart.name(0), f"{chart.number_of_antigens()}:{chart.number_of_sera()}", f"projections:{num_projections}" if num_projections else "no projections")
        if chart_forced_column_bases := chart.forced_column_bases():
            print("  forced column bases: see after sources below")

        if num_projections:
            print()
            for projection_no in range(num_projections):
                projection = chart.projection(projection_no)
                print(f"{projection_no:3d}  {projection.stress():11.6f} >={projection.minimum_column_basis()}", end="")
                if comment := projection.comment():
                    print(f" <{comment}>", end="")
                if projection_forced_column_bases := projection.forced_column_bases():
                    if projection_forced_column_bases == chart_forced_column_bases:
                        print(" chart-forced-column-bases", end="")
                    else:
                        print("", projection_forced_column_bases, end="")
                if disconnected := projection.disconnected():
                    print(f" discon:{disconnected}", end="")
                if unmovable := projection.unmovable():
                    print(f" unmov:{unmovable}", end="")
                if unmovable_in_the_last_dimension := projection.unmovable_in_the_last_dimension():
                    print(f" unmov-last:{unmovable_in_the_last_dimension}", end="")
                print()

        print()
        info = chart.info()
        if num_sources := info.number_of_sources():
            print("sources", num_sources)
            for source_no in range(num_sources):
                source = info.source(source_no)
                print(f"{source_no:3d} {source.date()} {source.name()}")
            print()
        if chart_forced_column_bases:
            print("forced column bases")
            for no, sr in chart.select_all_sera():
                fcb = f"{chart_forced_column_bases[no]:11.8f}"
                fcb = re.sub(r"0+$", lambda m: " " * len(m.group(0)), fcb)
                fcb = re.sub(r"\. ", "  ", fcb)
                print(f"{no:3d}     {fcb}   {sr.name()} {sr.serum_id()} {sr.passage()}")

        if chart.number_of_antigens() < 300:
            print()
            print("", ae.chart.text(chart), sep="\n")
            # chart2 = ae_backend.chart_v2.Chart(chart_file)
            # text = chart2.table_as_text(show_clades=True)
            # print(text)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("chart", nargs="+", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
