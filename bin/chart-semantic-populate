#! /usr/bin/env python3
# -*- Mode: Python; Mode: Rainbow; -*-
"""
Add semantic plot styles to charts
"""

# -reset: all grey, viewport
# sequenced
# time series
# bold outline for new
# bigger for new (time series)
# serum circles
# serum coverage
# procrustes

import sys, os, pprint
from pathlib import Path
import ae_backend
import ae.utils.load_module
import ae.semantic
# from ae.utils.num_digits import num_digits

# ======================================================================

def main(args):
    for filename in args.source:
        chart = ae_backend.chart_v3.Chart(filename)
        chart.populate_from_seqdb()
        if not args.keep_old_spec:
            chart.styles().remove()
        semantic_data = load_modules(chart=chart, module_filenames=args.processing_modules)
        add_semantic_attributes(chart=chart, attributes=semantic_data["attributes"], report=False)
        add_plot_styles(chart=chart, semantic_data=semantic_data["styles"])
        output(chart, source_filename=filename, output_filename=args.output, output_must_be_dir=len(args.source) > 1)

# ----------------------------------------------------------------------

def load_modules(chart: ae_backend.chart_v3.Chart, module_filenames: list[Path]) -> dict:
    semantic_attribute_data = {}
    semantic_plot_spec_data = {}
    subtype = f"{chart.info().type_subtype()}{chart.lineage()}"
    for module_filename in module_filenames:
        mod = ae.utils.load_module.load(module_filename)
        semantic_attribute_data.update(mod.semantic_attribute_data_for_subtype(subtype))
        semantic_plot_spec_data.update(mod.semantic_plot_spec_data_for_subtype(subtype))
    # pprint.pprint(semantic_data, width=200)
    return {"attributes": semantic_attribute_data, "styles": semantic_plot_spec_data}

# ----------------------------------------------------------------------

def add_semantic_attributes(chart: ae_backend.chart_v3.Chart, attributes: dict, report: bool):
    for key, data in attributes.items():
        if key == "vaccines":
            # expected data: [{"name": "MALAYSIA/2506/2004", "passage": "egg", "surrogate": False, "year": "2006", **ignored}]
            result = ae.semantic.vaccine.attributes(chart=chart, entries=data, current_vaccine_years=["202102", "202109", "202202"])
            if report:
                print(result.report(), file=sys.stderr)
        elif key[:6] == "clades":
            # expected data: [{"name": "3C.2a1b.2a.2 156S", "clade": "3C.2a1b.2a.2", "aa": "156S", **ignored}]
            ae.semantic.clade.attributes(chart=chart, entries=data)
        elif key == "serology":
            result = ae.semantic.name_passage.attributes(chart=chart, semantic_key="serology", entries=data)
            if report:
                print(result.report(header_prefix="Serology "), file=sys.stderr)
        else:
            print(f">> unrecognized key \"{key}\" in semantic attribute data", file=sys.stderr)
    ae.semantic.reference.attributes(chart=chart) # Set reference ("R") semantic attribute for reference antigens
    ae.semantic.passage.attributes(chart=chart) # Set passage type ("p") semantic attributes for all antigens and sera
    ae.semantic.continent.attributes(chart=chart) # Set continent ("C9") and country ("c9") semantic attributes for all antigens and sera

# ----------------------------------------------------------------------

def add_plot_styles(chart: ae_backend.chart_v3.Chart, semantic_data: dict):
    # back styles
    added_styles = set()
    # TODO -reset style
    for name, data in semantic_data.items():
        if name[:6] == "clades":
            added_styles |= ae.semantic.clade.style(chart=chart, name=name, data=data)
        elif name == "serology":
            added_styles |= ae.semantic.name_passage.style(chart=chart, style_name="-" + name, semantic_key=name, point_style=data["point_style"], label_style=data["label_style"])
        else:
            print(f">> unrecognized key \"{name}\" in semantic style data", file=sys.stderr)
    added_styles |= ae.semantic.continent.style(chart=chart)
    added_styles |= ae.semantic.vaccine.style(chart=chart)
    added_styles |= ae.semantic.pale.style(chart=chart)
    added_styles |= ae.semantic.time_series.style(chart=chart)

    # front styles
    front_style_order = ["clades", "clades-v1", "clades-v2", "serology"]
    def add_front_style(style_name: str, references: list[str], title: str, show_legend: bool, legend_counter: bool = True, style_priority: int = None):
        style = chart.styles()[style_name]
        if style_priority is None:
            try:
                style_priority = 10 + front_style_order.index(style_name)
            except ValueError:
                style_priority = 10 + len(front_style_order)
        style.priority = style_priority
        for ref in references:
            if ref in added_styles:
                style.add_modifier(parent=ref)
            style.plot_title.text.text = title
            style.legend.shown = show_legend
            style.legend.add_counter = legend_counter

    title_prefix = f"{chart.info().lab()} {chart.info().type_subtype()} {chart.info().assay_HI_or_Neut()}"
    for added in added_styles:
        if added.startswith("-clades") and "sera" not in added:
            add_front_style(style_name=added[1:], references=["-reset", added, "-vaccines"], title=f"{title_prefix} by clade", show_legend=True, legend_counter=True)
        elif added == "-serology":
            add_front_style(style_name=added[1:], references=["-reset", "-clades", "-clades-v1", "-pale", added, "-vaccines-blue"], title=f"{title_prefix} with serology antigens", show_legend=True, legend_counter=True)

# ----------------------------------------------------------------------

def output(chart: ae_backend.chart_v3.Chart, source_filename: Path, output_filename: Path, output_must_be_dir: bool):
    if not output_filename:
        output_filename = source_filename
    else:
        if not output_filename.exists() and str(output_filename) not in ["-", "="] and (output_must_be_dir or output_filename.suffix != ".ace"):
            output_filename.mkdir(parents=True)
        if output_filename.is_dir():
            output_filename = output_filename.joinpath(source_filename.name)
        elif output_must_be_dir:
            raise RuntimeError("--output must be directory")
    chart.write(output_filename)

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("source", nargs="+", type=Path)
    parser.add_argument("-o", "--output", type=Path, help="if there is just one source, output can be a file name, otherwise output must be direcory, if ommited source is replaced.")
    parser.add_argument("-s", dest="processing_modules", action="append", default=[], type=Path)
    parser.add_argument("--keep-old-spec", action="store_true", default=False, help="do not remove existing semantic plot styles")

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"{err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
