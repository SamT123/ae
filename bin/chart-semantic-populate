#! /usr/bin/env python3
# -*- Mode: Python; Mode: Rainbow; -*-
"""
Add semantic plot styles to charts
"""

# pale clades
# sequenced
# serology
# continent
# time series
# bold outline for new
# vaccines
# serum circles
# serum coverage
# procrustes

import sys, os, pprint
from pathlib import Path
import ae_backend
import ae.utils.load_module
from ae.utils.num_digits import num_digits

# ======================================================================

def main(args):
    for filename in args.source:
        chart = ae_backend.chart_v3.Chart(filename)
        chart.populate_from_seqdb()
        if not args.keep_old_spec:
            chart.styles().remove()
        styles = {}
        for mod in args.processing_modules:
            styles.update(process_module(chart, mod))
        # pprint.pprint(styles, width=200)
        extra_clades = {}
        for style_name, style in styles.items():
            add_style(chart, style_name=style_name, style_data=style, extra_clades=extra_clades)
        add_extra_clades(chart, extra_clades)
        output(chart, source_filename=filename, output_filename=args.output, output_must_be_dir=len(args.source) > 1)

# ----------------------------------------------------------------------

def process_module(chart: ae_backend.chart_v3.Chart, module_filename: Path):
    mod = ae.utils.load_module.load(module_filename)
    return mod.semantic_data_for_subtype(f"{chart.info().type_subtype()}{chart.lineage()}")

# ----------------------------------------------------------------------

def add_style(chart: ae_backend.chart_v3.Chart, style_name: str, style_data: list, extra_clades: dict):
    print(f"add_style {style_name}")
    # metadata = style_metadata(style_name)
    style = chart.styles()[f"-{style_name}"]
    style.priority = 1000
    legend_priority = 99
    map_type_suffix = ""
    style_modifier_added = False
    for modifier in style_data:
        if style_name.startswith("clades") and (clade := modifier.get("clade")):
            map_type_suffix = " by clade"
            if aa := modifier.get("aa"):
                extra_clade = f"{clade} {aa}"
                extra_clades[extra_clade] = {"base_clade": clade, "aa": aa}
                clade = extra_clade
            style.add_modifier(selector=["C", clade], fill=modifier["fill"], outline="black", rais=True, only="antigens", legend=modifier["legend"], legend_priority=legend_priority)
        elif style_name == "vaccines":
            if report := set_semantic_vaccine(chart, **modifier):
                if not style_modifier_added:
                    style.add_modifier(selector=["V", ""], outline="black", rais=True, size=100, only="antigens")
                    style_modifier_added = True
                print(report)
        else:
            print(f">> unsupported style \"{style_name}\"", file=sys.stderr)
        legend_priority -= 1
    style.plot_title.text.text = f"{chart.info().lab()} {chart.info().type_subtype()} {chart.info().assay_HI_or_Neut()}{map_type_suffix}"
    style.legend.add_counter = True

    # for style_name, style in style_desc.items():
    #     if priority := style.get("priority"):
    #         styles[style_name].priority = priority
    #     if parent := style.get("parent"):
    #         styles[style_name].add_modifier(parent=parent)
    #     legend_priority = 99
    #     for modifier in style.get("modifiers", []):
    #         if modifier.get("clade"):
    #             selector = ["C", modifier["clade"]]
    #         styles[style_name].add_modifier(selector=selector, fill=modifier["fill"], outline="black", rais=True, only="antigens", legend=modifier["legend"], legend_priority=legend_priority)
    #         legend_priority -= 1

# ----------------------------------------------------------------------

def add_extra_clades(chart: ae_backend.chart_v3.Chart, clades_to_add: dict):
    for name, data in clades_to_add.items():
        for selector in [chart.select_antigens, chart.select_sera]:
            for no, ag_sr in selector(lambda en: en.has_clade(data["base_clade"]) and en.aa[data["aa"]]):
                ag_sr.semantic.add_clade(name)

# ----------------------------------------------------------------------

def set_semantic_vaccine(chart: ae_backend.chart_v3.Chart, name: str, year: str = None, passage: str = None, surrogate: bool = False, **rest) -> str:
    """passage: "egg", "cell", "reassortant" """
    ag_num_digits  = num_digits(chart.number_of_antigens())
    layout = chart.projection().layout() if chart.number_of_projections() else None
    vac_name = f"{chart.info().type_subtype()}/{name}"
    report = ""
    for psg in ["egg", "cell", "reassortant"] if passage is None else [passage]:
        antigens = chart.select_antigens(lambda ag: ag.name == vac_name and ag.passage_is(psg) and layout.connected(ag.point_no))
        subreport = None
        if len(antigens):
            has_layers = chart.titers().number_of_layers() > 0
            if has_layers and len(antigens) > 1:
                antigens.sort_by_number_of_layers_descending()
            antigens[0][1].semantic.vaccine((year or "") + ("s" if surrogate else ""))
            subreport = f"  {psg}: {len(antigens)}\n"
            for no, ag in antigens:
                if has_layers:
                    layers = chart.titers().layers_with_antigen(no)
                    layers_s = f" layers: ({len(layers)}){layers}"
                else:
                    layers = []
                    layers_s = ""
                subreport += f"    AG {no:{ag_num_digits}d} {ag.designation()}{layers_s}\n"
        if subreport:
            if not report:
                report = f"vaccines \"{name}\" {passage or ''}{' surrogate' if surrogate else ''} \"{year}\"\n"
            report += subreport
    return report.rstrip()

# ----------------------------------------------------------------------


# class StyleMetadata:

#     def __int__(self, style_name: str):

# def style_metadata(style_name: str) -> dict:
#     metadata = {"priority": 1000, "prefix": "-"}
#     if style_name.startswith("clades"):
#         metadata["priority"
#     return metadata

# ----------------------------------------------------------------------

def output(chart: ae_backend.chart_v3.Chart, source_filename: Path, output_filename: Path, output_must_be_dir: bool):
    if not output_filename:
        output_filename = source_filename
    else:
        if not output_filename.exists() and (output_must_be_dir or output_filename.suffix != ".ace"):
            output_filename.mkdir(parents=True)
        if output_filename.is_dir():
            output_filename = output_filename.joinpath(source_filename.name)
        elif output_must_be_dir:
            raise RuntimeError("--output must be directory")
    chart.write(output_filename)

# ======================================================================

import argparse, traceback

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("source", nargs="+", type=Path)
    parser.add_argument("-o", "--output", type=Path, help="if there is just one source, output can be a file name, otherwise output must be direcory, if ommited source is replaced.")
    parser.add_argument("-s", dest="processing_modules", action="append", default=[], type=Path)
    parser.add_argument("--keep-old-spec", action="store_true", default=False, help="do not remove existing semantic plot styles")

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"{err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
