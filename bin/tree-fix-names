#! /usr/bin/env python3
"""
Read tree from newick, fix names not found in the current seqdb using hash, export to newick.
Names can be updated in seqdb, e.g. bug fixed in name parsing or master changed
"""

import os, sys, re, argparse
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

sSubtypeFix = {"B": "B", "BVIC": "B", "BV": "B", "BY": "B", "BYAM": "B", "A(H1N1)": "A(H1N1)", "H1": "A(H1N1)", "1": "A(H1N1)", "A(H3N2)": "A(H3N2)", "H3": "A(H3N2)", "3": "A(H3N2)"}

def main(args: argparse.Namespace):
    # seqdb = ae_backend.seqdb.for_subtype(sSubtypeFix[args.subtype.upper()])
    tree = ae_backend.tree.load(args.input_tree)

    if bad_inodes := tree.select_inodes_with_just_one_child():
        bad_inodes_txt = "\n  ".join(f"{node.node_id()} --> {node.first_leaf().name()}" for node in bad_inodes)
        print(f">> tree has {len(bad_inodes)} inode(s) with just one child (raxml may fail)\n  {bad_inodes_txt}", file=sys.stderr)

    messages = tree.fix_names_by_seqdb(sSubtypeFix[args.subtype.upper()])
    print("\n".join(messages))
    if args.output_tree:
        ae_backend.tree.export(tree, args.output_tree)

# ----------------------------------------------------------------------

sReHash = re.compile(r"_([0-9A-F]{8})$")

def hash(seq_id: str):
    if mm := sReHash.search(seq_id):
        return mm.group(1)
    else:
        return None

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("subtype", choices=["b", "h1", "h3"])
    parser.add_argument("input_tree", type=Path)
    parser.add_argument("output_tree", nargs="?", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    import traceback
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
