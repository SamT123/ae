#! /usr/bin/env python3
"""
Seqdb lookup
"""

import os, sys, re, collections, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
from ae.sequences.source import fasta
import ae_backend

# ----------------------------------------------------------------------

sSubtypeFix = {"B": "B", "A(H1N1)": "A(H1N1)", "H1": "A(H1N1)", "1": "A(H1N1)", "A(H3N2)": "A(H3N2)", "H3": "A(H3N2)", "3": "A(H3N2)"}

def main(args: argparse.Namespace):
    if subtype := args.name and sSubtypeFix.get(args.name[0].upper()):
        find(subtype, args.name[1:], args)
    else:
        for subtype in ["B", "A(H1N1)", "A(H3N2)"]:
            find(subtype, args.name, args)

# ----------------------------------------------------------------------

def find(subtype: str, names: list[str], args: argparse.Namespace):
    selected = (ae_backend.seqdb.for_subtype(subtype)
                .select_all()
                .exclude_with_issue(not args.with_issues)
                .filter_dates(args.start_date, args.end_date)
                # .find_masters()
                .remove_hash_duplicates()
                .replace_with_master()
                .sort(args.sort_order)
                )
    print_names = True
    if args.fasta_aa:
        fasta.write(args.fasta_aa, selected, aa=True, wrap_pos=80 if args.wrap else 0, name=lambda ref: ref.seq_id())
        print_names = False
    if args.fasta_nuc:
        fasta.write(args.fasta_nuc, selected, aa=False, wrap_pos=80 if args.wrap else 0, name=lambda ref: ref.seq_id())
        print_names = False
    print(f"{subtype:7s} {len(selected)}")
    if print_names:
        for no, seq in enumerate(selected):
            print(f"> {seq.seq_id()} [{seq.date()}]")
            if no >= 20:
                break

# ----------------------------------------------------------------------

# def write_fasta(selected :ae_backend.seqdb.Selected, filename: Path, aa: bool, wrap: bool):
#     def do_wrap(data: str):
#         if wrap:
#             size = 80
#             return "\n".join(data[i:i+size] for i in range(0, len(data), size))
#         else:
#             return data

#     if filename == "-":
#         fil = sys.stdout
#     else:
#         fil = filename.open("w")
#     for ref in selected:
#         fil.write(f">{ref.seq_id()}\n{do_wrap(ref.aa() if aa else ref.nuc())}\n")
#     if filename != "-":
#         fil.close()

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-b", "--start-date", dest="start_date", default="")
    parser.add_argument("-e", "--end-date", dest="end_date", default="")
    parser.add_argument("--with-issues", dest="with_issues", action="store_true", default=False)
    parser.add_argument("-s", "--sort", dest="sort_order", default="+date", help="date, +date, -date, name, +name, -name")
    parser.add_argument("--fas-aa", dest="fasta_aa", type=Path)
    parser.add_argument("--fas-nuc", dest="fasta_nuc", type=Path)
    parser.add_argument("--wrap", dest="wrap", action="store_true", default=False)
    parser.add_argument("name", nargs="*")
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true", default=False)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
