#! /usr/bin/env python3
"""
Read tree from newick, remove long branches, populate, set clades, export to json
"""

import os, sys, re, collections, pprint, argparse, traceback
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
import ae_backend

sSubtypes = {"H3": "A(H3N2)", "H1": "A(H1N1)", "BVIC": "B", "BYAM": "B"}

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    tree = ae_backend.tree.load(args.input)

    if args.print_cumulative:
        leaves_by_cumulative = tree.select_leaves()
        leaves_by_cumulative.sort_by_cumulative()
        print(f"leaves_by_cumulative: {len(leaves_by_cumulative)}")
        for ind in range(min(args.print_cumulative, len(leaves_by_cumulative))):
            leaf = leaves_by_cumulative[ind]
            print(f"{leaf.cumulative_edge():.8f}  {leaf.node_id():5d} {leaf.name()}")

    if args.remove_if_cumulative_more_than:
        to_remove = tree.select_leaves()
        to_remove.filter_by_cumulative_more_than(args.remove_if_cumulative_more_than)
        print(f"remove {len(to_remove)} leaves with cumulative > {args.remove_if_cumulative_more_than}")
        for ind in range(len(to_remove)):
            leaf = to_remove[ind]
            print(f"  {leaf.cumulative_edge():.8f}  {leaf.node_id():5d} {leaf.name()}")
        to_remove.remove()

    if args.remove_seq_id:
        to_remove = tree.select_leaves()
        to_remove.filter_seq_id(args.remove_seq_id.split(","))
        print(f"remove {len(to_remove)} leaves by seq_id")
        for ind in range(len(to_remove)):
            leaf = to_remove[ind]
            print(f"  {leaf.cumulative_edge():.8f}  {leaf.node_id():5d} {leaf.name()}")
        to_remove.remove()

    if args.populate:
        subtype = sSubtypes.get(args.subtype.upper(), args.subtype.upper())
        tree.populate_with_duplicates(subtype)
        tree.populate_with_sequences(subtype)
        tree.set_clades(os.environ["AC_CLADES_JSON_V2"])

    if args.ladderize:
        tree.ladderize("number-of-leaves")

    if args.output:
        ae_backend.tree.export(tree, args.output)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", type=Path)
    parser.add_argument("output", nargs="?", type=Path)
    parser.add_argument("-s", "--subtype", type=str, default="B")
    parser.add_argument("--print-cumulative", dest="print_cumulative", type=int, default=None)
    parser.add_argument("--remove-if-cumulative-more-than", dest="remove_if_cumulative_more_than", type=float, default=None)
    parser.add_argument("--remove-seq-id", dest="remove_seq_id", default=None, help="comma separated list of seq_id to remove")
    parser.add_argument("--populate", "-p", action="store_true", default=False)
    parser.add_argument("--ladderize", "-l", action="store_true", default=False)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
