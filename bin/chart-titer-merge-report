#! /usr/bin/env python3
import os, sys, pprint, argparse, traceback
from pathlib import Path
import ae_backend
import ae.virus.name_format, ae.utils.format_table

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for chart_file in args.chart:
        chart = ae_backend.chart_v3.Chart(chart_file)
        if args.common_only:
            antigens = chart.select_antigens(lambda ag: len(ag.layers()) > 1)
            sera = chart.select_sera(lambda sr: len(sr.layers()) > 1)
            # antigens = chart.select_antigens(ll)
            # sera = chart.select_sera(ll)
        else:
            antigens = chart.select_all_antigens()
            sera = chart.select_all_sera()
        titer_merge_report(chart, antigens=antigens, sera=sera)

# ----------------------------------------------------------------------

# def ll(aa):
#     print(aa, aa.serum.name(), aa.serum.serum_id(), aa.layers())
#     return len(aa.layers()) > 1

def titer_merge_report(chart: ae_backend.chart_v3.Chart, antigens: ae_backend.chart_v3.SelectedAntigens, sera: ae_backend.chart_v3.SelectedSera):
    if not antigens or not sera:
        raise ValueError("empty antigen or serum list")
    # print("antigens", type(antigens), len(antigens))
    # print(ae.virus.name_format.name_format(antigens[0][1], "{?}"))
    # print(ae.virus.name_format.name_format(antigens[0][1], "{continent} : {country} : {extra} : {host} : {host_location_isolation_year} : {name} : {reassortant} : {year} : {designation} : {passage} : {passage_without_date} : {reassortant} : {annotations} : {date} : {lab_id} : {aa} : {aa-163} : {laa-163} : {nuc} : {nuc-163} : {lnuc-163}"))
    # print("sera", len(sera))
    # print(ae.virus.name_format.name_format(sera[0][1], "{?}"))
    # print(ae.virus.name_format.name_format(sera[0][1], "{aa} : {aa-1} : {annotations} : {continent} : {country} : {designation} : {extra} : {host} : {host_location_isolation_year} : {laa-1} : {lnuc-1} : {name} : {nuc} : {nuc-1} : {passage} : {passage_without_date} : {reassortant} : {serum_id} : {serum_species} : {year}"))
    titers = chart.titers()
    report = titers.set_from_layers_report()
    table = []
    table.append([""] + [sr_no + 1 for sr_no, sr in sera])            # serum indexes
    table.append([""] + [ae.virus.name_format.name_format(sr, "{location_year_abbreviated}") for sr_no, sr in sera])            # serum abbreviated names
    for ag_no, ag in antigens:
        table.append([ag.designation()])
        for layer_no in range(titers.number_of_layers()):
            table.append([chart.info().source(layer_no).name_or_date()] + [titers.titer_of_layer(layer_no=layer_no, antigen_no=ag_no, serum_no=sr_no) for sr_no, sr in sera])
        table.append(["Merge"] + [titers.titer(antigen_no=ag_no, serum_no=sr_no) for sr_no, sr in sera])
        table.append(["Report"] + [report_value(report.brief(antigen_no=ag_no, serum_no=sr_no)) for sr_no, sr in sera])
        table.append([])
    # pprint.pprint(table, width=200)
    print(ae.utils.format_table.format_table(table, field_sep="  ", format_field=format_table_field), end="\n\n")

    table_sera = [[sr_no + 1, ae.virus.name_format.name_format(sr, "{location_year_abbreviated}"), sr.designation()] for sr_no, sr in sera]
    print(ae.utils.format_table.format_table(table_sera, field_sep="  "), end="\n\n")

    print(report.brief_description())

# ----------------------------------------------------------------------

class report_value:

    def __init__(self, val):
        self.val = val

    def __str__(self):
        return self.val

def format_table_field(field, width: int):
    if isinstance(field, ae_backend.chart_v3.Titer):
        if field.is_dont_care():
            return " " * width
        else:
            return f"{str(field):>{width}s}"
    elif isinstance(field, report_value):
        return f"{field.val:^{width}s}"
    else:
        return ae.utils.format_table.format_field_default(field=field, width=width)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("chart", nargs="+", type=Path)

    parser.add_argument("-a", "--all", dest="common_only", action="store_false", default=True, help="titer merge report for all antigens and sera")

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
