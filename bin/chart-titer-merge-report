#! /usr/bin/env python3
import os, sys, pprint, argparse, traceback
from pathlib import Path
import ae_backend
from ae.virus import name_format
from ae.utils import format_table

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for chart_file in args.chart:
        chart = ae_backend.chart_v3.Chart(chart_file)
        if args.common_only:
            antigens = chart.select_antigens(lambda ag: len(ag.layers()) > 1)
            sera = chart.select_sera(lambda sr: len(sr.layers()) > 1)
        else:
            antigens = chart.select_all_antigens()
            sera = chart.select_all_sera()
        titer_merge_report(chart, antigens=antigens, sera=sera)

# ----------------------------------------------------------------------

def titer_merge_report(chart: ae_backend.chart_v3.Chart, antigens: ae_backend.chart_v3.SelectedAntigens, sera: ae_backend.chart_v3.SelectedSera):
    if not antigens or not sera:
        raise ValueError("empty antigen or serum list")
    titers = chart.titers()
    report = titers.set_from_layers_report()
    table = []
    table.append([""] + [format_table.Centered(sr_no + 1) for sr_no, sr in sera])            # serum indexes
    table.append([""] + [name_format.name_format(sr, "{location_year_abbreviated}") for sr_no, sr in sera])            # serum abbreviated names
    for ag_no, ag in antigens:
        table.append([ag.designation()])
        for layer_no in range(titers.number_of_layers()):
            table.append([chart.info().source(layer_no).name_or_date()] + [TiterFormatter(titers.titer_of_layer(layer_no=layer_no, antigen_no=ag_no, serum_no=sr_no)) for sr_no, sr in sera])
        table.append(["Merge"] + [TiterFormatter(titers.titer(antigen_no=ag_no, serum_no=sr_no)) for sr_no, sr in sera])
        table.append(["Report"] + [format_table.Centered(report.brief(antigen_no=ag_no, serum_no=sr_no)) for sr_no, sr in sera])
        table.append([])
    # pprint.pprint(table, width=200)
    print(format_table.format_table(table, field_sep="  "), end="\n\n")

    table_sera = [[sr_no + 1, name_format.name_format(sr, "{location_year_abbreviated}"), sr.designation()] for sr_no, sr in sera]
    print(format_table.format_table(table_sera, field_sep="  "), end="\n\n")

    print(report.brief_description())

# ----------------------------------------------------------------------

class TiterFormatter (format_table.ValueFormatter):

    def fmt(self, width: int) -> str:
        if self.value.is_dont_care():
            return " " * width
        else:
            return f"{str(self.value):>{width}s}"

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("chart", nargs="+", type=Path)

    parser.add_argument("-a", "--all", dest="common_only", action="store_false", default=True, help="titer merge report for all antigens and sera")

    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
