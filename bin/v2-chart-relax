#! /usr/bin/env python3
import os, sys, re, json, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart = ae_backend.chart_v2.Chart(args.source)
    if args.incremental:
        chart.relax_incremental(number_of_optimizations=args.number_of_optimizations, remove_source_projection=not args.keep_original_projections, unmovable_non_nan_points=args.unmovable_non_nan_points)
    else:
        chart.relax(number_of_dimensions=args.number_of_dimensions, number_of_optimizations=args.number_of_optimizations, minimum_column_basis=args.minimum_column_basis, dimension_annealing=args.dimension_annealing)
    if args.grid:
        print(f">> grid test not yet implemented", file=sys.stderr)
    if args.keep_projections:
        chart.keep_projections(args.keep_projections)
    print(chart.make_name(0), f"{chart.number_of_antigens()}:{chart.number_of_sera()}", f"projections:{chart.number_of_projections()}")
    if args.output:
        chart.export(args.output)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("-n", dest="number_of_optimizations", default=0, type=int)
    parser.add_argument("-d", dest="number_of_dimensions", default=2, type=int)
    parser.add_argument("-m", dest="minimum_column_basis", default="none")
    parser.add_argument("-k", "--keep-projections", default=10, type=int, help="number of projections to keep, 0 - keep all")
    # parser.add_argument("-r", "--reorient", help="chart to re-orient resulting projections to")
    parser.add_argument("-i", "--incremental", default=False, action="store_true", help="randomize only points having NaN coordinates")
    parser.add_argument("--no-grid", dest="grid", default=True, action="store_false")
    parser.add_argument("--grid-json", type=Path, help="export grid test results into json")
    parser.add_argument("--grid-step", default=0.1, type=float)
    # parser.add_argument("--method", default="alglib-cg", choices=["alglib-lbfgs", "alglib-cg", "optim-bfgs", "optim-differential-evolution"])
    parser.add_argument("--dimension-annealing", action="store_true", default=False)
    # parser.add_argument("--max-distance-multiplier", dest="max_distance_multiplier", default=2.0, help="randomization diameter multiplier")
    parser.add_argument("--keep-original-projections", action="store_true", default=False)
    parser.add_argument("--no-disconnect-having-few-titers", dest="disconnect_having_few_titers", default=True, action="store_false")
    parser.add_argument("--unmovable-non-nan-points", action="store_true", default=False)
    # parser.add_argument("--disconnect-antigens", default=None, help="comma or space separated list of antigen/point indexes (0-based) to disconnect for the new projections")
    # parser.add_argument("--disconnect-sera", default=None, help="comma or space separated list of serum indexes (0-based) to disconnect for the new projections")
    # parser.add_argument("--threads", default=0, type=int, help="number of threads to use for optimization (omp): 0 - autodetect, 1 - sequential")
    parser.add_argument("source", type=Path)
    parser.add_argument("output", nargs="?", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
