#! /usr/bin/env python3
"""==============================================================================

Making antigenic maps
=====================

Optimising chart (single table or merge) from scratch
-----------------------------------------------------

Read chart from a.ace, make a map using 1000 fine optimisations in 2d
without minimum column basis without dimension annealing, keep only 10
best projections, write resulting chart into b.ace

chart-relax -n 1000 a.ace b.ace

Add options to

* specify minimum column basis

  -m 1280

* use rough optimisation (~2 times faster)

  --rough

* use dimension annealing

  --dimension-annealing

* do not disconnect antigens/sera having fewer than 3 numeric titers

* keep all projections

  -k 0

* keep just the best projection

  -k 1

* avoid running grid test on the best projection

  --no-grid

Optimising incremental merge
----------------------------

Source chart must be made using incremental merge, e.g. by chart-merge --merge-type incremental

chart-relax --incremental -n 1000 a.ace b.ace

Relaxing existing projection
----------------------------

==============================================================================

"""

import os, sys, re, json, argparse, traceback
from pathlib import Path
import ae_backend

class Error (RuntimeError): pass

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    chart = ae_backend.chart_v3.Chart(args.source)

    if args.incremental:
        if chart.number_of_projections() == 0 or chart.titers().number_of_layers() < 2:
            raise Error("cannot relax incrmentally")
        print(f"relaxing chart incrementally {args.number_of_optimizations}")
        chart.relax_incremental(number_of_optimizations=args.number_of_optimizations, remove_source_projection=not args.keep_original_projections, unmovable_non_nan_points=args.unmovable_non_nan_points, rough=args.rough)
    else:
        print(f"relaxing chart {args.number_of_optimizations} times in {args.number_of_dimensions}d with minimum_column_basis={args.minimum_column_basis}")
        chart.relax(number_of_dimensions=args.number_of_dimensions, number_of_optimizations=args.number_of_optimizations, minimum_column_basis=args.minimum_column_basis, dimension_annealing=args.dimension_annealing, rough=args.rough)

    if args.grid: # and not args.rough:
        grid_test(chart)

    if args.keep_projections:
        chart.keep_projections(args.keep_projections)

    if args.output:
        # print brief report
        print(chart.name(0), f"{chart.number_of_antigens()}:{chart.number_of_sera()}", f"projections:{chart.number_of_projections()}")
        # write resulting chart
        chart.write(args.output)
    else:
        # no output is requested
        # print detailed report
        detailed_report(chart)

# ----------------------------------------------------------------------

def grid_test(chart: ae_backend.chart_v3.Chart):
    projection = chart.projection()
    print("running grid test on the best projection")
    while True:
        print(f"    stress: {projection.stress():.6f}")
        result = chart.grid_test()
        if cnt := result.count_trapped():
            print("  {cnt} trapped points found, moving them and relaxing")
            for en in result.trapped_hemisphering():
                print(en)
            result.apply(projection)
            projection.relax()
        else:
            print("  no more trapped points found, grid test completed")
            break

# ----------------------------------------------------------------------

def detailed_report(chart: ae_backend.chart_v3.Chart):
    print("-" * 78)
    num_projections = chart.number_of_projections()
    print(chart.name(0), f"{chart.number_of_antigens()}:{chart.number_of_sera()}", f"projections:{num_projections}" if num_projections else "no projections")
    if chart_forced_column_bases := chart.forced_column_bases():
        print("  forced column bases: see after sources below")
    print()

    # print data about each projection
    for projection_no in range(num_projections):
        projection = chart.projection(projection_no)
        print(f"{projection_no:3d}  {projection.stress():11.6f} >={projection.minimum_column_basis()}", end="")
        if comment := projection.comment():
            print(f" <{comment}>", end="")
        if projection_forced_column_bases := projection.forced_column_bases():
            if projection_forced_column_bases == chart_forced_column_bases:
                print(" chart-forced-column-bases", end="")
            else:
                print("", projection_forced_column_bases, end="")
        if disconnected := projection.disconnected():
            print(f" discon:{disconnected}", end="")
        # if unmovable := projection.unmovable():
        #     print(f" unmov:{unmovable}", end="")
        # if unmovable_in_the_last_dimension := projection.unmovable_in_the_last_dimension():
        #     print(f" unmov-last:{unmovable_in_the_last_dimension}", end="")
        print()

    info = chart.info()
    if num_sources := info.number_of_sources():
        # show data about each table in the merge
        print(f"\nsources {num_sources}")
        for source_no in range(num_sources):
            source = info.source(source_no)
            print(f"{source_no:3d} {source.date()} {source.name()}")

    if chart_forced_column_bases:
        # show detailed information about column bases
        print("\nforced column bases")
        report_column_bases(chart=chart, column_bases=chart_forced_column_bases)
    else:
        print("\ncolumn bases")
        report_column_bases(chart=chart, column_bases=chart.column_bases(chart.projection(0).minimum_column_basis()))

# ----------------------------------------------------------------------

def report_column_bases(chart: ae_backend.chart_v3.Chart, column_bases: list):
    for no, sr in chart.select_all_sera():
        fcb = f"{column_bases[no]:11.8f}"
        fcb = re.sub(r"0+$", lambda m: " " * len(m.group(0)), fcb)
        fcb = re.sub(r"\. ", "  ", fcb)
        print(f"{no:3d}     {fcb}   {sr.name()} {sr.serum_id()} {sr.passage()}")

# ----------------------------------------------------------------------


        # if args.all:
        #     print()
        #     for projection_no in range(num_projections):
        #         projection = chart.projection(projection_no)
        #         print(f"{projection_no:3d}  {projection.stress():11.6f} >={projection.minimum_column_basis()}", end="")
        #         if comment := projection.comment():
        #             print(f" <{comment}>", end="")
        #         if projection_forced_column_bases := projection.forced_column_bases():
        #             if projection_forced_column_bases == chart_forced_column_bases:
        #                 print(" chart-forced-column-bases", end="")
        #             else:
        #                 print("", projection_forced_column_bases, end="")
        #         print()
        #     print()
        #     info = chart.info()
        #     if num_sources := info.number_of_sources():
        #         print("sources", num_sources)
        #         for source_no in range(num_sources):
        #             source = info.source(source_no)
        #             print(f"{source_no:3d} {source.date()} {source.name()}")
        #         print()
        #     if chart_forced_column_bases:
        #         print("forced column bases")
        #         for no, sr in chart.select_all_sera():
        #             fcb = f"{chart_forced_column_bases[no]:11.8f}"
        #             fcb = re.sub(r"0+$", lambda m: " " * len(m.group(0)), fcb)
        #             fcb = re.sub(r"\. ", "  ", fcb)
        #             print(f"{no:3d}     {fcb}   {sr.name()} {sr.serum_id()} {sr.passage()}")

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("-n", dest="number_of_optimizations", default=100, type=int)
    parser.add_argument("-d", dest="number_of_dimensions", default=2, type=int)
    parser.add_argument("-m", dest="minimum_column_basis", default="none")
    parser.add_argument("-k", "--keep-projections", default=10, type=int, help="number of projections to keep, 0 - keep all")
    # parser.add_argument("-r", "--reorient", help="chart to re-orient resulting projections to")
    parser.add_argument("-i", "--incremental", default=False, action="store_true", help="randomize only points having NaN coordinates")
    parser.add_argument("--rough", default=False, action="store_true", help="perform rough optimisation")
    parser.add_argument("--no-grid", dest="grid", default=True, action="store_false")
    parser.add_argument("--grid-json", type=Path, help="export grid test results into json")
    parser.add_argument("--grid-step", default=0.1, type=float)
    # parser.add_argument("--method", default="alglib-cg", choices=["alglib-lbfgs", "alglib-cg", "optim-bfgs", "optim-differential-evolution"])
    parser.add_argument("--dimension-annealing", action="store_true", default=False)
    # parser.add_argument("--max-distance-multiplier", dest="max_distance_multiplier", default=2.0, help="randomization diameter multiplier")
    parser.add_argument("--keep-original-projections", action="store_true", default=False)
    parser.add_argument("--no-disconnect-having-few-titers", dest="disconnect_having_few_titers", default=True, action="store_false")
    parser.add_argument("--unmovable-non-nan-points", action="store_true", default=False)
    # parser.add_argument("--disconnect-antigens", default=None, help="comma or space separated list of antigen/point indexes (0-based) to disconnect for the new projections")
    # parser.add_argument("--disconnect-sera", default=None, help="comma or space separated list of serum indexes (0-based) to disconnect for the new projections")
    # parser.add_argument("--threads", default=0, type=int, help="number of threads to use for optimization (omp): 0 - autodetect, 1 - sequential")
    parser.add_argument("source", type=Path)
    parser.add_argument("output", nargs="?", type=Path)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Error as err:
    print(f"> ERROR: {err}", file=sys.stderr)
    exit_code = 1
except Exception as err:
    print(f"> ERROR: {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
