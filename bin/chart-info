#! /usr/bin/env python3
import os, sys, json, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for chart_file in args.chart:
        chart = ae_backend.chart_v3.Chart(chart_file)
        num_projections = chart.number_of_projections()
        print(chart.name_for_file())
        print(chart.name(0), f"{chart.number_of_antigens()}:{chart.number_of_sera()}", f"projections:{num_projections}" if num_projections else "no projections")
        if chart_forced_column_bases := chart.forced_column_bases():
            if args.all:
                print("  forced column bases: see after sources below")
            else:
                print("  forced column bases:", chart_forced_column_bases)
        if args.all:
            print()
            for projection_no in range(num_projections):
                projection = chart.projection(projection_no)
                print(f"{projection_no:3d}  {projection.stress():9.4f} >={projection.minimum_column_basis()}", end="")
                if comment := projection.comment():
                    print(f" <{comment}>", end="")
                if projection_forced_column_bases := projection.forced_column_bases():
                    if projection_forced_column_bases == chart_forced_column_bases:
                        print(" chart-forced-column-bases", end="")
                    else:
                        print("", projection_forced_column_bases, end="")
                print()
            print()
            print("all sources")
            if chart_forced_column_bases:
                print("  forced column bases:", chart_forced_column_bases)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("chart", nargs="+", type=Path)
    parser.add_argument("-a", "--all", dest="all", action="store_true", default=False, help="show all possible information")
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
