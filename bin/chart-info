#! /usr/bin/env python3
import os, sys, re, json, pprint, argparse, traceback
from pathlib import Path
import ae_backend
from ae.utils.format_table import format_table
import ae.chart

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for chart_file in args.chart:
        if chart_file != args.chart[0]:
            print("\n")
        chart = ae_backend.chart_v3.Chart(chart_file)
        num_projections = chart.number_of_projections()
        print(chart.name_for_file())
        print(ae.chart.info(chart, show_projections=args.show_projections or args.show_all, show_forced_column_bases=args.show_all, show_sources=args.show_all))

        if args.print_layout is not None:
            layout = chart.projection(args.print_layout).layout()
            print(f"layout {layout.number_of_dimensions()}d {len(layout)} points")
            number_of_antigens = chart.number_of_antigens()
            table = [["AG", ag_no, ag.name(), " ".join(ag.annotations()), ag.reassortant(), ag.passage(), "", *layout[ag_no]] for ag_no, ag in chart.select_all_antigens()]
            table += [["SR", sr_no, sr.name(), " ".join(sr.annotations()), sr.reassortant(), sr.passage(), sr.serum_id(), *layout[sr_no + number_of_antigens]] for sr_no, sr in chart.select_all_sera()]
            # table = [["AG", ag_no, ag.designation(), "", *layout[ag_no]] for ag_no, ag in chart.select_all_antigens()]
            # table += [["SR", sr_no, sr.designation(), sr.passage(), *layout[sr_no + number_of_antigens]] for sr_no, sr in chart.select_all_sera()]
            print(format_table(table))

        if args.print_transformation is not None:
            print("transformation", chart.projection(args.print_transformation).transformation())

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("chart", nargs="+", type=Path)
    parser.add_argument("-a", "--all", dest="show_all", action="store_true", default=False, help="show all possible information")
    parser.add_argument("-p", dest="show_projections", action="store_true", default=False, help="show projections")
    parser.add_argument("--layout", dest="print_layout", type=int, default=None, help="print layout of the specified projection")
    parser.add_argument("--transformation", dest="print_transformation", type=int, default=None, help="print transformation of the specified projection")
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
