#! /usr/bin/env python3

import os, sys, argparse, traceback, pprint
from pathlib import Path
if os.environ.get("DYLD_INSERT_LIBRARIES"):
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build.debug", "py"]]
else:
    sys.path[:0] = [str(Path(os.environ["AE_ROOT"], dir)) for dir in ["build", "py"]]
from ae.sequences.source import fasta
import ae_backend

# ======================================================================

def main(args: argparse.Namespace):
    stat = {}
    for subtype in ["B", "A(H1N1)", "A(H3N2)"]:
        stat.update(select_collect(subtype, args))
    report(stat)

# ----------------------------------------------------------------------

def select_collect(subtype: str, args: argparse.Namespace):
    if subtype == "B":
        return collect_b()
    else:
        return {subtype: collect(ae_backend.seqdb.for_subtype(subtype).select_all())}

# ----------------------------------------------------------------------

def collect(selected):
    result = {"total": len(selected), "by-year": {}}
    selected.exclude_with_issue()
    result["no-issue"] = len(selected)
    for ref in selected:
        set_by_year(ref, result)
    return result

# ----------------------------------------------------------------------

def collect_b():
    selected = ae_backend.seqdb.for_subtype("B").select_all()
    result = {"B": {"total": len(selected), "no-issue": 0, "by-year": {}}}
    for ref in selected:
        lineage = f"B-{ref.lineage()}"
        for_lineage = result.setdefault(lineage, {"total": 0, "no-issue": 0, "by-year": {}})
        for_lineage["total"] += 1
        if not ref.has_issues():
            for_lineage["no-issue"] += 1
            result["B"]["no-issue"] += 1
            set_by_year(ref, for_lineage, result["B"])
    return result

# ----------------------------------------------------------------------

def set_by_year(ref, *targets):
    year = ref.date()[:4]
    for target in targets:
        target["by-year"].setdefault(year, 0)
        target["by-year"][year] += 1

# ----------------------------------------------------------------------

def report(stat: dict):
    pprint.pprint(stat, width=150)

# ======================================================================

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true", default=False)
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)

# ======================================================================
