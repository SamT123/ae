#! /usr/bin/env python3
"""
Populates charts with sequences and clades
"""

import os, sys, argparse, traceback
from pathlib import Path
import ae_backend

# ----------------------------------------------------------------------

def main(args: argparse.Namespace):
    for filename in args.charts:
        chart = ae_backend.chart_v3.Chart(filename)
        ag, sr = chart.populate_from_seqdb(report_matched=args.verbose)
        if len(args.charts) > 0:
            print(f"{filename}\n  AG {ag:4d} of {chart.number_of_antigens():4d}\n  SR {sr:4d} of {chart.number_of_sera():4d}")
        else:
            print(f"AG {ag:4d} of {chart.number_of_antigens():4d}\nSR {sr:4d} of {chart.number_of_sera():4d}")
        if args.export:
            if args.output_dir:
                filename = args.output_dir.joinpath(filename.name)
            if args.replace_symlinks and filename.is_symlink():
                filename.unlink()
            chart.write(filename=filename)

# ----------------------------------------------------------------------

try:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("charts", nargs="+", type=Path)
    parser.add_argument("-n", dest="export", action="store_false", default=True, help="no export")
    parser.add_argument("-v", dest="verbose", action="store_true", default=False, help="list matched antigens/sera")
    parser.add_argument("-o", "--output-dir", type=Path)
    parser.add_argument("--replace-symlinks", action="store_true", default=False, help="if ace file is a symlink, replace it with a regular file on save")
    args = parser.parse_args()
    exit_code = main(args) or 0
except Exception as err:
    print(f"> {err}\n{traceback.format_exc()}", file=sys.stderr)
    exit_code = 1
exit(exit_code)
